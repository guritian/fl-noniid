import matplotlib.pyplot as plt
import numpy as np


fig = plt.figure() 

x = np.linspace(1, 10, 100)

plt.plot(np.arange(1,51), [0.9043, 0.9521, 0.9696, 0.9655, 0.9743, 0.9771, 0.9792, 0.9807, 0.9712, 0.9821, 0.9851, 0.9844, 0.9833, 0.9854, 0.9839, 0.9858, 0.9826, 0.9881, 0.986, 0.9851, 0.9877, 0.9878, 0.9888, 0.9882, 0.9875, 0.9895, 0.9879, 0.9876, 0.9872, 0.9888, 0.9882, 0.99, 0.9883, 0.9897, 0.9892, 0.9758, 0.9896, 0.989, 0.9893, 0.9888, 0.9887, 0.9901, 0.9894, 0.9896, 0.9893, 0.99, 0.9893, 0.9897, 0.9895, 0.9905], label='Traditional ML (epoch)')
plt.plot(np.arange(1,51), [0.1514, 0.2342, 0.5245, 0.8135, 0.8636, 0.8914, 0.904, 0.9158, 0.9257, 0.9301, 0.9311, 0.9394, 0.9451, 0.9465, 0.9486, 0.9512, 0.9541, 0.9569, 0.9594, 0.9594, 0.9622, 0.9631, 0.9616, 0.9636, 0.966, 0.9655, 0.9657, 0.9675, 0.9683, 0.9682, 0.9683, 0.9686, 0.9705, 0.9705, 0.971, 0.9717, 0.9715, 0.9716, 0.9719, 0.9737, 0.9727, 0.9735, 0.9732, 0.975, 0.9757, 0.9751, 0.9756, 0.9753, 0.976, 0.9756], label='Federated Learning')

plt.xlabel('rounds')
plt.ylabel('accuracy')

plt.title("Accuracy on MNIST dataset (IID setting)")

plt.legend(loc=4)

plt.savefig('graphs/iid_mnist.png')





fig = plt.figure()

x = np.linspace(1, 10, 100)

plt.plot(np.arange(1,51), [0.1514, 0.2342, 0.5245, 0.8135, 0.8636, 0.8914, 0.904, 0.9158, 0.9257, 0.9301, 0.9311, 0.9394, 0.9451, 0.9465, 0.9486, 0.9512, 0.9541, 0.9569, 0.9594, 0.9594, 0.9622, 0.9631, 0.9616, 0.9636, 0.966, 0.9655, 0.9657, 0.9675, 0.9683, 0.9682, 0.9683, 0.9686, 0.9705, 0.9705, 0.971, 0.9717, 0.9715, 0.9716, 0.9719, 0.9737, 0.9727, 0.9735, 0.9732, 0.975, 0.9757, 0.9751, 0.9756, 0.9753, 0.976, 0.9756], label='IID')
plt.plot(np.arange(1,51), [0.1135, 0.375, 0.7347, 0.8402, 0.8726, 0.8872, 0.9033, 0.911, 0.9109, 0.9189, 0.9317, 0.9332, 0.9366, 0.9429, 0.9492, 0.9499, 0.9521, 0.9554, 0.9594, 0.9591, 0.9561, 0.9623, 0.9624, 0.9627, 0.9638, 0.964, 0.9658, 0.9657, 0.9677, 0.9679, 0.9674, 0.9694, 0.9681, 0.9696, 0.9694, 0.9695, 0.97, 0.9715, 0.9702, 0.9719, 0.9719, 0.973, 0.9714, 0.9726, 0.9722, 0.974, 0.9735, 0.9734, 0.9736, 0.975], label='20% non-IID')
plt.plot(np.arange(1,51), [0.1247, 0.3854, 0.5715, 0.656, 0.7082, 0.7414, 0.7775, 0.8072, 0.8165, 0.8278, 0.8533, 0.8824, 0.8602, 0.8973, 0.8975, 0.8995, 0.9027, 0.9157, 0.9267, 0.8948, 0.938, 0.9247, 0.9322, 0.9035, 0.9321, 0.9439, 0.9373, 0.9223, 0.9397, 0.9451, 0.9232, 0.9343, 0.9479, 0.9535, 0.957, 0.9401, 0.9463, 0.953, 0.9577, 0.9536, 0.95, 0.9504, 0.9605, 0.9478, 0.9602, 0.9602, 0.961, 0.9593, 0.9642, 0.9602], label='40% non-IID')
plt.plot(np.arange(1,51), [0.1011, 0.3334, 0.3578, 0.3854, 0.4746, 0.4512, 0.5218, 0.5432, 0.5725, 0.6219, 0.6467, 0.6836, 0.7003, 0.7296, 0.714, 0.7192, 0.749, 0.73, 0.752, 0.7541, 0.7689, 0.7685, 0.7872, 0.8036, 0.7993, 0.8, 0.8289, 0.8166, 0.8334, 0.8468, 0.8231, 0.8299, 0.8572, 0.8452, 0.8638, 0.8685, 0.8552, 0.865, 0.8697, 0.8739, 0.8783, 0.8844, 0.885, 0.8925, 0.8752, 0.8781, 0.8926, 0.8965, 0.9097, 0.8901], label='60% non-IID')
plt.plot(np.arange(1,51), [0.1129, 0.1691, 0.1749, 0.1909, 0.2271, 0.2903, 0.3717, 0.3573, 0.4492, 0.4832, 0.4373, 0.4677, 0.3699, 0.4433, 0.5657, 0.5207, 0.5497, 0.6002, 0.5765, 0.5983, 0.6168, 0.6235, 0.6499, 0.6782, 0.671, 0.7, 0.708, 0.714, 0.6906, 0.6927, 0.678, 0.7364, 0.7431, 0.734, 0.7384, 0.7618, 0.7513, 0.784, 0.7501, 0.776, 0.7926, 0.7805, 0.765, 0.8093, 0.7937, 0.7737, 0.7928, 0.816, 0.8035, 0.7985], label='80% non-IID')
plt.plot(np.arange(1,51), [0.1135, 0.1032, 0.1028, 0.0746, 0.0982, 0.1135, 0.1365, 0.1134, 0.0974, 0.1136, 0.1743, 0.1875, 0.2094, 0.1207, 0.1135, 0.2828, 0.1024, 0.1121, 0.2342, 0.125, 0.2173, 0.2859, 0.1246, 0.1068, 0.1639, 0.2073, 0.2849, 0.0892, 0.423, 0.1736, 0.301, 0.3972, 0.2517, 0.361, 0.1344, 0.1562, 0.3588, 0.2918, 0.3942, 0.3359, 0.3005, 0.2073, 0.2968, 0.5204, 0.4138, 0.3816, 0.3803, 0.423, 0.4683, 0.3462], label='100% non-IID')

plt.xlabel('rounds')
plt.ylabel('accuracy')

plt.title("Accuracy on MNIST dataset (non-IID setting)")

plt.legend(loc=2)

plt.savefig('graphs/niid_mnist.png')





fig = plt.figure()

x = np.linspace(1, 10, 100)

# plt.plot(np.arange(1,11), [0.1514, 0.2342, 0.5245, 0.8135, 0.8636, 0.8914, 0.904, 0.9158, 0.9257, 0.9301], label='IID')
plt.plot(np.arange(1,51), [0.1135, 0.0982, 0.101, 0.1331, 0.1028, 0.0974, 0.0984, 0.0974, 0.1498, 0.1135, 0.0974, 0.1135, 0.0974, 0.1078, 0.0958, 0.1028, 0.1358, 0.1877, 0.1028, 0.101, 0.1559, 0.2015, 0.1135, 0.1878, 0.098, 0.0892, 0.1032, 0.1526, 0.101, 0.1845, 0.0958, 0.1135, 0.1827, 0.1688, 0.1005, 0.1193, 0.1663, 0.098, 0.1231, 0.0958, 0.1325, 0.2527, 0.1298, 0.0958, 0.1883, 0.1166, 0.0909, 0.1818, 0.2305, 0.1969], label='1 class per device')
plt.plot(np.arange(1,51), [0.2218, 0.1841, 0.2327, 0.3695, 0.3252, 0.3962, 0.3719, 0.5338, 0.5981, 0.5726, 0.5769, 0.6373, 0.6008, 0.6885, 0.5146, 0.6769, 0.5341, 0.612, 0.7087, 0.6747, 0.5652, 0.7773, 0.7563, 0.7077, 0.6927, 0.6648, 0.6615, 0.7074, 0.7092, 0.6527, 0.6018, 0.6547, 0.7129, 0.6551, 0.8015, 0.7533, 0.7852, 0.7408, 0.8488, 0.7685, 0.8021, 0.8352, 0.7784, 0.8306, 0.7103, 0.8066, 0.8407, 0.8558, 0.8565, 0.6761], label='2 classes per device')
plt.plot(np.arange(1,51), [0.1938, 0.2542, 0.4434, 0.5893, 0.6019, 0.6619, 0.7653, 0.6982, 0.7751, 0.6922, 0.6563, 0.7533, 0.7212, 0.8408, 0.8249, 0.882, 0.8424, 0.876, 0.808, 0.7894, 0.8868, 0.7965, 0.8757, 0.8943, 0.8906, 0.8466, 0.8931, 0.8806, 0.9065, 0.8914, 0.8496, 0.8397, 0.9165, 0.8514, 0.8713, 0.9069, 0.8676, 0.9129, 0.9208, 0.9142, 0.8843, 0.8983, 0.9289, 0.8975, 0.8793, 0.9337, 0.9091, 0.9336, 0.9171, 0.9341], label='3 classes per device')
plt.plot(np.arange(1,51), [0.1661, 0.3758, 0.4249, 0.4698, 0.519, 0.8294, 0.798, 0.84, 0.8088, 0.8361, 0.7601, 0.8473, 0.8905, 0.8561, 0.7711, 0.8858, 0.7903, 0.9047, 0.8752, 0.8662, 0.9067, 0.8993, 0.7436, 0.9131, 0.8967, 0.923, 0.8927, 0.9201, 0.8641, 0.8838, 0.8872, 0.9018, 0.9336, 0.9171, 0.9314, 0.9192, 0.8623, 0.9097, 0.9296, 0.8796, 0.9316, 0.9254, 0.938, 0.9406, 0.8662, 0.9381, 0.8286, 0.8881, 0.931, 0.9321], label='5 classes per device')
plt.plot(np.arange(1,51), [0.1448, 0.2289, 0.5318, 0.8102, 0.8665, 0.889, 0.9011, 0.9154, 0.9228, 0.9271, 0.9342, 0.9403, 0.9437, 0.9466, 0.9488, 0.9503, 0.9527, 0.9572, 0.9571, 0.9604, 0.963, 0.9618, 0.9633, 0.9664, 0.9669, 0.9673, 0.9675, 0.9673, 0.9682, 0.9687, 0.9694, 0.9699, 0.9712, 0.9712, 0.9722, 0.9728, 0.9735, 0.973, 0.9724, 0.973, 0.9747, 0.9735, 0.9754, 0.9754, 0.9744, 0.9748, 0.9754, 0.9758, 0.976, 0.9749], label='10 classes per device')

plt.xlabel('rounds')
plt.ylabel('accuracy')

plt.title("Accuracy on MNIST dataset (non-IID setting)")

plt.legend(loc=4)

plt.savefig('graphs/niid_mnist2.png')





fig = plt.figure()

x = np.linspace(1, 10, 100)

plt.plot(np.arange(1,51), [0.06646249858006423, 0.07420486002080096, 0.05713042609586597, 0.040706613858419206, 0.03897471338914786, 0.06535151885033902, 0.051805579790109864, 0.03898462482993671, 0.050542363362480594, 0.04447663953176453, 0.05453089749490394, 0.13039725439415709, 0.06310982633310744, 0.049791108375202106, 0.0614995796464069, 0.05653670938239375, 0.06532958662889488, 0.04052030202506406, 0.0810214744846153, 0.057136583801754286, 0.03929795300558429, 0.04036308073317973, 0.04350155256494262, 0.0500080221714315, 0.03573025904515427, 0.05164338138041644, 0.03352393594208277, 0.05108322058853002, 0.032130265040297555, 0.040116719161529264, 0.04396586649792394, 0.07025062541461025, 0.04501440322428184, 0.03179754572163528, 0.03738855635713122, 0.02888275875594789, 0.03875309192760131, 0.0417162758525072, 0.04042447302550357, 0.0426174777169281, 0.06438290106979813, 0.05761400746181131, 0.034544750405178265, 0.027528923592980137, 0.025729613284238558, 0.040569396677731816, 0.038280347763722015, 0.0281294381436989, 0.3773435079116147, 0.030615298983907788], label='IID')
plt.plot(np.arange(1,51), [0.328628957882726, 0.13141593995295153, 0.08059056271090381, 0.05100575694745305, 0.0609780414985396, 0.04930323088639662, 0.05379771805350166, 0.04889155225099608, 0.05794239734499896, 0.0813173181857191, 0.04581816006943466, 0.05015545357097925, 0.04651198148385705, 0.04382096573933026, 0.24225013011144, 0.055312637709096016, 0.041734424903085314, 0.03918567225220592, 0.04761729338479485, 0.04208044912094786, 0.08799754785094742, 0.04769644955980872, 0.04208165830376584, 0.04607629243483137, 0.032717140727239816, 0.03453147759453855, 0.03146520904941054, 0.05559988417401278, 0.08373541738499239, 0.034937322233115645, 0.0388251064588815, 0.2091380635695625, 0.04679681724179911, 0.03053768158209685, 0.03176086008026988, 0.0438713045215237, 0.030972302037878437, 0.04061576585084778, 0.036774868039824236, 0.03913981584689606, 0.09918132305111613, 0.028242451420844555, 0.028500060400327636, 0.033365525757115884, 0.04287748815597589, 0.026489169220099563, 0.02403690356933926, 0.02459319181947716, 0.04260769584606156, 0.024857730953695825], label='20% non-IID')
plt.plot(np.arange(1,51), [0.3388948760213871, 0.12845672582450016, 0.08308458176117628, 0.08102538837398945, 0.17834687682809205, 0.067159015615056, 0.05955919151060544, 0.07002433499530533, 0.07665089151792195, 0.04631256667871079, 0.052284300619035086, 0.07664853805169114, 0.04284792948524478, 0.04140253968052567, 0.04300514413203888, 0.03918055142014233, 0.08023238833828195, 0.07592139770252804, 0.06684450165588797, 0.037940729184225065, 0.035767994182375466, 0.035811549605764915, 0.045624612158314606, 0.032763153863272894, 0.04207925030876351, 0.04153263490860615, 0.040499600848201665, 0.035110064438216466, 0.035318404548595375, 0.03248232865980438, 0.06726170958033703, 0.03602994760086036, 0.07396577994551548, 0.04616703813236981, 0.11280853028122255, 0.033297458496055685, 0.03396603528371769, 0.026805393160062668, 0.02760606978303714, 0.03358720110609665, 0.04118979271798166, 0.049266922194762336, 0.0397747469301612, 0.03422513683349773, 0.028134714467859527, 0.06950208247097185, 0.05867391805137673, 0.03384959793597958, 0.039066929277653935, 0.034931823347577634], label='40% non-IID')
plt.plot(np.arange(1,51), [0.2879734299832602, 0.1189035414058087, 0.23035544694393545, 0.07370606110688907, 0.05423528373524324, 0.0796407797180112, 0.13231262059426846, 0.06421393288713349, 0.059624787187027635, 0.061950318719046014, 0.06004861898409875, 0.08045541533295962, 0.06897259742920057, 0.04409221681604323, 0.06006275838945387, 0.05033043024203391, 0.04485536624854286, 0.04668184146444822, 0.040505777711065866, 0.06583539419320067, 0.045083117794339565, 0.046961300862355566, 0.040653723300825916, 0.05122440338290661, 0.04014409956829258, 0.05503693647439648, 0.057646207448901525, 0.05170671481361363, 0.043615571221446416, 0.03993484360090624, 0.0759858527367936, 0.03621158434931236, 0.05148327659338305, 0.037477985495886636, 0.04249288698780878, 0.042571385475555404, 0.037720919587231685, 0.03521646540955052, 0.03500870229067317, 0.03747685513038563, 0.05238798939702778, 0.044525223023984366, 0.04936136811699798, 0.07944291489675774, 0.061693014787604014, 0.044316627951817344, 0.6083003743308022, 0.05189260067596888, 0.12463149947940085, 0.037433061648665625], label='60% non-IID')
plt.plot(np.arange(1,51), [2.317855037368969, 0.2614800578729283, 0.12238503951651973, 0.12735759554988804, 0.07663298411457213, 0.06687501767545649, 0.0925728132917772, 0.07191772273462624, 0.07924857831112082, 0.07288309918035504, 0.07849691938723165, 0.10373224366017753, 0.09371406519098492, 0.06567616952757457, 0.06168253416706169, 0.04544768101699997, 0.03771090125356398, 0.04758215522904299, 0.0423766407718371, 0.06539429539130058, 0.06329930918948584, 0.051298651723344885, 0.05309578518133453, 0.053311934636058315, 0.33285772861240515, 0.04621685115391664, 0.10023475571967652, 0.08484947632407644, 0.044412499127934886, 0.05417449408523765, 0.12972192040840053, 0.14187585764927854, 0.035367008913239684, 0.08384876490698487, 0.11365546506647595, 0.04466433971093934, 0.049526984004516, 0.05424550092718956, 0.03404604982136274, 0.05576097805125061, 0.0321530802629899, 0.035058586356311844, 0.033288789230054, 0.03862068299681329, 0.03867879905545928, 0.031644707568320316, 0.031610222478233294, 0.026704588542865164, 0.032029886266736037, 0.0403448663763635], label='80% non-IID')
plt.plot(np.arange(1,51), [0.6446940237363716, 0.08810997643773069, 0.05825657970007396, 0.06654965666566458, 0.07944525551950235, 0.05861609394604093, 0.08362619450082329, 0.10505793420905224, 0.06320682647644017, 0.07511518859036373, 0.08635054943009668, 0.1397330841905027, 0.06745532393614438, 0.061085831709685214, 0.1569426204784236, 0.057293013303597685, 0.11196212754018058, 0.05610905579093183, 0.0705723766029766, 0.08016500900961385, 0.04831470000023487, 0.06367434898243197, 0.08627995893361931, 0.1017625926678642, 0.09339240843010316, 0.14509903480828018, 0.1366223719983401, 0.050527069312302456, 0.0575659639645766, 0.05530311151811692, 0.0503233105027663, 0.05962445719140001, 0.08400716093717528, 0.042376258819548415, 0.048253803117847285, 0.057608349996155675, 0.06264311058147402, 0.055265447826756006, 0.06779085354838953, 0.053698756625763115, 0.05698456326422604, 0.08210274222555733, 0.06332631261366195, 0.07920222214509047, 0.046859782434956115, 0.033662259521862824, 0.05432214353411288, 0.048986437673480335, 0.055566371839273335, 0.045589704922091724], label='100% non-IID')

plt.xlabel('rounds')
plt.ylabel('average difference')

plt.title("Average parameters' difference on MNIST dataset")

plt.legend(loc=2)

plt.savefig('graphs/niid_mnist_paradiff.png')





fig = plt.figure()

x = np.linspace(1, 10, 100)

plt.plot(np.arange(1,51), [0.06646249858006423, 0.07420486002080096, 0.05713042609586597, 0.040706613858419206, 0.03897471338914786, 0.06535151885033902, 0.051805579790109864, 0.03898462482993671, 0.050542363362480594, 0.04447663953176453, 0.05453089749490394, 0.13039725439415709, 0.06310982633310744, 0.049791108375202106, 0.0614995796464069, 0.05653670938239375, 0.06532958662889488, 0.04052030202506406, 0.0810214744846153, 0.057136583801754286, 0.03929795300558429, 0.04036308073317973, 0.04350155256494262, 0.0500080221714315, 0.03573025904515427, 0.05164338138041644, 0.03352393594208277, 0.05108322058853002, 0.032130265040297555, 0.040116719161529264, 0.04396586649792394, 0.07025062541461025, 0.04501440322428184, 0.03179754572163528, 0.03738855635713122, 0.02888275875594789, 0.03875309192760131, 0.0417162758525072, 0.04042447302550357, 0.0426174777169281, 0.06438290106979813, 0.05761400746181131, 0.034544750405178265, 0.027528923592980137, 0.025729613284238558, 0.040569396677731816, 0.038280347763722015, 0.0281294381436989, 0.3773435079116147, 0.030615298983907788], label='IID')
plt.plot(np.arange(1,51), [0.6535635686008824, 0.07487037892968165, 0.13161787006478615, 0.08226359823643936, 0.06329609956456886, 0.0735242201045018, 0.0969689041275961, 0.9988795539111444, 0.08500351285487093, 0.06730724544145078, 0.045420927499818436, 0.059566813443969774, 0.05232898708441234, 0.0676172577152955, 0.07408349072345824, 0.08105118222399446, 0.06401674498011596, 0.0992934829572934, 0.05132901250013376, 0.08602706833820899, 0.06774236539398203, 0.07269212198996798, 0.10044940757562362, 0.06810753171099954, 0.0473591403932774, 0.047696141256667234, 0.06723462509721423, 0.06795061595237302, 0.1895045023799775, 0.0612537379184888, 0.1141083616035994, 0.059621204215333165, 0.07103750692057527, 0.13219831232171872, 0.0938774792848851, 0.12530007673128926, 0.09791379658592722, 0.09419245011555652, 0.07254838200040567, 0.08762518968213043, 0.06051915156754128, 0.05983238005776161, 0.08539345808511134, 0.11549490575340267, 0.11108001765548664, 0.06035121052111371, 0.1242869809757038, 0.1575154481021997, 0.10718884916156443, 0.062266151305569964], label='1 class per device')
plt.plot(np.arange(1,51), [0.5467268440896683, 0.2389901524962168, 0.135034090675877, 0.10837062000443372, 0.14174345898410096, 0.06111873145858021, 0.10261116156944884, 0.06507365355668461, 0.06839178024416663, 0.10815223503224836, 0.07874143222186804, 0.061794971796679775, 0.0876139621062882, 0.07646864705178866, 0.056096304205203465, 0.06804797901436774, 0.05184244881701222, 0.04947264569193638, 0.0594276058828304, 0.061168827358892564, 0.1474536269020204, 0.06880581480252106, 0.044881978461801836, 0.05571039744057904, 0.07007987247426503, 0.040534642799197385, 0.06595367820229331, 0.05048253625990778, 0.052275954822326776, 0.7310090882163319, 0.05795466946311222, 0.061487522240581925, 0.04152686856384942, 0.060738198964231625, 0.1036698585099236, 0.036568722453644606, 0.06086229421118682, 0.051069533332031326, 0.05998744845249598, 0.04570165703321959, 0.0376185863097382, 0.036278894438799295, 0.043387420087238185, 0.0375964690619458, 0.034579378897806365, 0.046932881698332304, 0.04090981999787488, 0.033704260888732615, 0.5210529580623791, 0.035731500627455136], label='2 classes per device')
plt.plot(np.arange(1,51), [0.5089467912832639, 0.1369364008830551, 0.14463950566595687, 0.08132383913402491, 0.15480973748486318, 0.06253082192124902, 0.06485847664285706, 0.058007384897095136, 0.06712022469214167, 0.0878246740581373, 0.07993292641914714, 0.051678863127645504, 0.07222818413658362, 0.05521090689440894, 0.056621443916253164, 0.18191849385075293, 0.039629044175486364, 0.04011536960811316, 0.04074452867276454, 0.06747894959040537, 0.047179864716986715, 0.037067411477571435, 0.08397523935869193, 0.07944718985579421, 0.033997257615289225, 0.04078430683298538, 0.07965364726104987, 0.04009364710667533, 0.09861925446821128, 0.04052902288303425, 0.034314804724834364, 0.05146196024503942, 0.06457415476207254, 0.034759593073595815, 0.04611358082618515, 0.03675284701642336, 0.052200127805415705, 0.03705211105571866, 0.04033681194185005, 0.03702127186311255, 0.05707586890173995, 0.04440234406276237, 0.03360092608791845, 0.031046199047920893, 0.02808084142281701, 0.0366350634835495, 0.03928135140454698, 0.02536522504449425, 0.03229175781425543, 0.05607793867388052], label='3 classes per device')
plt.plot(np.arange(1,51), [0.6742346519573559, 0.14976094705957674, 0.22827596322631746, 0.1194220731051982, 0.0666409580503001, 0.0975597829330408, 0.3335043963900549, 0.10015956348571503, 0.15711349519268175, 0.09618484061667826, 0.15707308121467775, 0.1309584108547179, 0.10224779166128724, 0.06732421432631916, 0.054388374737131415, 0.056818965851786536, 0.041855072152115015, 0.06966752167987633, 0.09282863348141683, 0.04327247452428491, 0.04896113937362927, 0.05373166601989974, 0.05098177146717904, 0.04215549793663829, 0.044506551072818916, 0.05542254692321254, 0.0656536286082354, 0.039666711128935515, 0.06290501548811434, 0.04277322007286195, 0.04724462253708269, 0.357491996547778, 0.04614447803146365, 0.05251625899297482, 0.050794496568417585, 0.0414350810120872, 0.04648413449563934, 0.0482151207845622, 0.04583476337963577, 0.037275620181979295, 0.04417142553078874, 0.0359921468665423, 0.05660245046864554, 0.028446937229449288, 0.039097964086797714, 0.041442736203076064, 0.027592101580768327, 0.03784676719112125, 0.0526228093059205, 0.057370016459724324], label='5 classes per device')
plt.plot(np.arange(1,51), [0.02360102689986443, 0.0249456724268615, 0.03021586237367146, 0.07710380057612967, 0.034539439097542084, 0.06987774842757707, 0.04735744437454829, 0.05157330607404266, 0.07237892840678152, 0.09906907333778857, 0.059317112741987824, 0.046195721366131384, 0.046354482141137736, 0.05861556779486255, 0.10483773821129802, 0.05779416403547845, 0.05172313098134994, 0.06191484847268984, 0.049953179619137665, 0.06003511531857692, 0.07478124080244312, 0.04529751866551169, 0.049373261153538066, 0.040679535669862835, 0.05875729157206513, 0.0536534550337493, 0.0428347328141824, 0.03646479755197938, 0.05407013501655896, 0.060901496916222764, 0.04865667865643589, 0.04434921158487798, 0.039886563883280136, 0.054467545021504686, 0.031412100091279524, 0.03209379920642197, 0.036823781426069284, 0.03250606314307887, 0.04297370682800521, 0.027381588868998958, 3.213148507681161, 0.04812870241051452, 0.041961821634178144, 0.03275173626571177, 0.0261757855680593, 0.06385060256219878, 0.037579631917909785, 0.028530223467536982, 0.03538414726521745, 0.27360986829388073], label='10 classes per device')

plt.xlabel('rounds')
plt.ylabel('average difference')

plt.title("Average parameters' difference on MNIST dataset")

plt.legend(loc=2)

plt.savefig('graphs/niid_mnist_paradiff2.png')





fig = plt.figure()

x = np.linspace(1, 10, 100)

plt.plot(np.arange(1,51), [0.114, 0.0982, 0.101, 0.1446, 0.1028, 0.0974, 0.098, 0.0974, 0.1554, 0.1135, 0.0974, 0.1142, 0.0974, 0.107, 0.0958, 0.1028, 0.154, 0.1723, 0.1028, 0.1009, 0.1332, 0.1888, 0.1135, 0.1807, 0.098, 0.0892, 0.1032, 0.1579, 0.101, 0.1759, 0.0958, 0.1137, 0.1457, 0.1331, 0.1032, 0.1182, 0.1405, 0.098, 0.1464, 0.0958, 0.1072, 0.2453, 0.1183, 0.0936, 0.187, 0.1107, 0.09, 0.1884, 0.208, 0.2061], label='batch size = 32')
plt.plot(np.arange(1,51), [0.1135, 0.0982, 0.101, 0.1331, 0.1028, 0.0974, 0.0984, 0.0974, 0.1498, 0.1135, 0.0974, 0.1135, 0.0974, 0.1078, 0.0958, 0.1028, 0.1358, 0.1877, 0.1028, 0.101, 0.1559, 0.2015, 0.1135, 0.1878, 0.098, 0.0892, 0.1032, 0.1526, 0.101, 0.1845, 0.0958, 0.1135, 0.1827, 0.1688, 0.1005, 0.1193, 0.1663, 0.098, 0.1231, 0.0958, 0.1325, 0.2527, 0.1298, 0.0958, 0.1883, 0.1166, 0.0909, 0.1818, 0.2305, 0.1969], label='batch size = 64')
plt.plot(np.arange(1,51), [0.1135, 0.0982, 0.101, 0.1235, 0.1028, 0.0974, 0.0992, 0.0974, 0.1514, 0.1135, 0.0974, 0.1135, 0.0974, 0.1099, 0.0958, 0.1028, 0.1334, 0.1621, 0.1028, 0.1022, 0.1557, 0.2168, 0.1135, 0.1914, 0.098, 0.0892, 0.1032, 0.161, 0.101, 0.1883, 0.0958, 0.1135, 0.2017, 0.1896, 0.1053, 0.1247, 0.182, 0.098, 0.1417, 0.0958, 0.1553, 0.2457, 0.1319, 0.1056, 0.1891, 0.1244, 0.0924, 0.1764, 0.2355, 0.1763], label='batch size = 128')
plt.plot(np.arange(1,51), [0.1135, 0.0982, 0.101, 0.1172, 0.1028, 0.0974, 0.1013, 0.0974, 0.14, 0.1135, 0.0974, 0.1135, 0.0974, 0.1089, 0.0958, 0.1028, 0.1323, 0.1422, 0.1028, 0.1028, 0.1649, 0.2274, 0.1135, 0.1895, 0.098, 0.0892, 0.1032, 0.1619, 0.101, 0.1845, 0.104, 0.1136, 0.2676, 0.172, 0.1332, 0.1288, 0.1896, 0.098, 0.1143, 0.0958, 0.1745, 0.2425, 0.143, 0.1099, 0.1897, 0.145, 0.0963, 0.1728, 0.2425, 0.1401], label='batch size = 256')
plt.plot(np.arange(1,51), [0.1135, 0.0982, 0.101, 0.1096, 0.1028, 0.0974, 0.1044, 0.0974, 0.1302, 0.1135, 0.0974, 0.1135, 0.0974, 0.104, 0.0958, 0.1028, 0.1389, 0.1349, 0.1028, 0.1082, 0.1637, 0.2539, 0.1135, 0.1989, 0.098, 0.0892, 0.1032, 0.1586, 0.101, 0.1861, 0.0958, 0.1135, 0.2526, 0.1796, 0.1654, 0.1247, 0.2145, 0.098, 0.1392, 0.0958, 0.1808, 0.2474, 0.142, 0.1696, 0.1907, 0.1441, 0.0975, 0.1772, 0.2351, 0.1365], label='batch size = 512')

plt.xlabel('rounds')
plt.ylabel('accuracy')

plt.title("1 class of data")

plt.legend(loc=2)

plt.savefig('graphs/batch_1.png')





fig = plt.figure()

x = np.linspace(1, 10, 100)

plt.plot(np.arange(1,51), [0.2079, 0.1911, 0.3136, 0.4081, 0.3352, 0.4076, 0.4525, 0.6073, 0.6337, 0.6488, 0.6048, 0.711, 0.6449, 0.7271, 0.5896, 0.7088, 0.597, 0.6578, 0.7411, 0.7274, 0.6091, 0.8201, 0.8006, 0.7419, 0.7234, 0.7128, 0.7423, 0.7559, 0.7524, 0.7257, 0.6531, 0.6754, 0.7531, 0.7137, 0.8441, 0.7901, 0.818, 0.7842, 0.8838, 0.7994, 0.8505, 0.85, 0.8167, 0.8553, 0.7469, 0.863, 0.8595, 0.8809, 0.876, 0.7126], label='batch size = 32')
plt.plot(np.arange(1,51), [0.2218, 0.1841, 0.2327, 0.3695, 0.3252, 0.3962, 0.3719, 0.5338, 0.5981, 0.5726, 0.5769, 0.6373, 0.6008, 0.6885, 0.5146, 0.6769, 0.5341, 0.612, 0.7087, 0.6747, 0.5652, 0.7773, 0.7563, 0.7077, 0.6927, 0.6648, 0.6615, 0.7074, 0.7092, 0.6527, 0.6018, 0.6547, 0.7129, 0.6551, 0.8015, 0.7533, 0.7852, 0.7408, 0.8488, 0.7685, 0.8021, 0.8352, 0.7784, 0.8306, 0.7103, 0.8066, 0.8407, 0.8558, 0.8565, 0.6761], label='batch size = 64')
plt.plot(np.arange(1,51), [0.1368, 0.1369, 0.1986, 0.2621, 0.2979, 0.3835, 0.3722, 0.4887, 0.5089, 0.5201, 0.5385, 0.5508, 0.5509, 0.658, 0.4454, 0.633, 0.4508, 0.5654, 0.6776, 0.602, 0.5234, 0.7297, 0.7167, 0.671, 0.6337, 0.6195, 0.5848, 0.6583, 0.6508, 0.5924, 0.5512, 0.6066, 0.6528, 0.6241, 0.7544, 0.7147, 0.7444, 0.6993, 0.8093, 0.7227, 0.7449, 0.7837, 0.707, 0.7904, 0.6498, 0.7658, 0.8049, 0.8087, 0.8309, 0.6144], label='batch size = 128')
plt.plot(np.arange(1,51), [0.1032, 0.11, 0.168, 0.2186, 0.2106, 0.3276, 0.4332, 0.3987, 0.4515, 0.4826, 0.4875, 0.4813, 0.4943, 0.6034, 0.4043, 0.5912, 0.417, 0.5372, 0.6264, 0.5323, 0.504, 0.6989, 0.6787, 0.6263, 0.5761, 0.5818, 0.561, 0.6524, 0.6072, 0.5061, 0.4488, 0.5864, 0.6225, 0.5854, 0.7182, 0.679, 0.7116, 0.6656, 0.7714, 0.6745, 0.7103, 0.7656, 0.6875, 0.7693, 0.6255, 0.7443, 0.7791, 0.7764, 0.8126, 0.5729], label='batch size = 256')
plt.plot(np.arange(1,51), [0.1032, 0.1016, 0.1288, 0.1566, 0.1737, 0.2097, 0.3248, 0.2844, 0.3702, 0.3987, 0.3561, 0.3653, 0.3368, 0.4557, 0.3294, 0.5033, 0.4009, 0.5223, 0.5512, 0.5031, 0.4518, 0.6697, 0.6489, 0.5532, 0.4976, 0.5489, 0.5205, 0.6279, 0.5685, 0.4809, 0.3858, 0.5514, 0.5881, 0.5576, 0.6872, 0.631, 0.672, 0.6205, 0.7388, 0.6407, 0.6725, 0.7377, 0.6259, 0.7426, 0.5939, 0.7286, 0.7543, 0.7512, 0.7948, 0.5323], label='batch size = 512')

plt.xlabel('rounds')
plt.ylabel('accuracy')

plt.title("2 classes of data")

plt.legend(loc=2)

plt.savefig('graphs/batch_2.png')





fig = plt.figure()

x = np.linspace(1, 10, 100)

plt.plot(np.arange(1,51), [0.3719, 0.6156, 0.45, 0.5936, 0.67, 0.8742, 0.8317, 0.8569, 0.8633, 0.8819, 0.8383, 0.8992, 0.919, 0.8985, 0.8019, 0.9142, 0.8013, 0.9159, 0.913, 0.8997, 0.9247, 0.9211, 0.8079, 0.9327, 0.9117, 0.9389, 0.8955, 0.9356, 0.8861, 0.903, 0.9052, 0.921, 0.941, 0.9342, 0.9449, 0.928, 0.8481, 0.9112, 0.941, 0.8842, 0.9422, 0.9369, 0.9483, 0.948, 0.8822, 0.9481, 0.8523, 0.9118, 0.927, 0.9478], label='batch size = 32')
plt.plot(np.arange(1,51), [0.1661, 0.3758, 0.4249, 0.4698, 0.519, 0.8294, 0.798, 0.84, 0.8088, 0.8361, 0.7601, 0.8473, 0.8905, 0.8561, 0.7711, 0.8858, 0.7903, 0.9047, 0.8752, 0.8662, 0.9067, 0.8993, 0.7436, 0.9131, 0.8967, 0.923, 0.8927, 0.9201, 0.8641, 0.8838, 0.8872, 0.9018, 0.9336, 0.9171, 0.9314, 0.9192, 0.8623, 0.9097, 0.9296, 0.8796, 0.9316, 0.9254, 0.938, 0.9406, 0.8662, 0.9381, 0.8286, 0.8881, 0.931, 0.9321], label='batch size = 64')
plt.plot(np.arange(1,51), [0.1106, 0.2083, 0.2995, 0.3881, 0.4106, 0.7475, 0.7162, 0.7697, 0.7171, 0.8175, 0.6673, 0.7851, 0.8471, 0.813, 0.7184, 0.8334, 0.7317, 0.8664, 0.8395, 0.8071, 0.8764, 0.8591, 0.6667, 0.8804, 0.8648, 0.8985, 0.8619, 0.8927, 0.8182, 0.8576, 0.8493, 0.8649, 0.9059, 0.8893, 0.9109, 0.8956, 0.8383, 0.8773, 0.9165, 0.838, 0.8981, 0.9099, 0.9227, 0.9238, 0.8344, 0.9193, 0.7943, 0.8343, 0.9243, 0.9079], label='batch size = 128')
plt.plot(np.arange(1,51), [0.0892, 0.1235, 0.2263, 0.2493, 0.3351, 0.524, 0.531, 0.5986, 0.607, 0.7534, 0.5705, 0.7547, 0.8176, 0.772, 0.6514, 0.7736, 0.6676, 0.8412, 0.7995, 0.7657, 0.8493, 0.8293, 0.5951, 0.855, 0.8361, 0.8694, 0.8305, 0.8643, 0.7601, 0.8339, 0.8093, 0.8278, 0.8766, 0.8563, 0.8871, 0.8733, 0.8085, 0.8499, 0.8934, 0.8106, 0.8708, 0.8829, 0.9021, 0.9066, 0.809, 0.9021, 0.7433, 0.7924, 0.9065, 0.889], label='batch size = 256')
plt.plot(np.arange(1,51), [0.0892, 0.0892, 0.1132, 0.1088, 0.1932, 0.2225, 0.2677, 0.3414, 0.3109, 0.4156, 0.3744, 0.6708, 0.7488, 0.6804, 0.5462, 0.7647, 0.5843, 0.8072, 0.7577, 0.7075, 0.8151, 0.7977, 0.534, 0.831, 0.8062, 0.8416, 0.8009, 0.8356, 0.7193, 0.8135, 0.7872, 0.7923, 0.8506, 0.828, 0.8608, 0.8511, 0.7861, 0.822, 0.8741, 0.7847, 0.8509, 0.8619, 0.8826, 0.8864, 0.7857, 0.8846, 0.7108, 0.7722, 0.89, 0.8674], label='batch size = 512')

plt.xlabel('rounds')
plt.ylabel('accuracy')

plt.title("5 classes of data")

plt.legend(loc=2)

plt.savefig('graphs/batch_5.png')





fig = plt.figure()

x = np.linspace(1, 10, 100)

plt.plot(np.arange(1,51), [0.089, 0.0928, 0.0915, 0.091, 0.0911, 0.0904, 0.091, 0.0906, 0.0903, 0.0905, 0.0903, 0.091, 0.0893, 0.09, 0.0922, 0.0906, 0.096, 0.0995, 0.1005, 0.1035, 0.1046, 0.1183, 0.1039, 0.0987, 0.0963, 0.0933, 0.0948, 0.0955, 0.0983, 0.1036, 0.1017, 0.0992, 0.118, 0.1313, 0.1411, 0.1417, 0.1501, 0.1462, 0.1512, 0.1678, 0.167, 0.1613, 0.1891, 0.19, 0.1981, 0.1904, 0.1946, 0.1946, 0.1911, 0.1562], label='1 class per device')
plt.plot(np.arange(1,51), [0.081, 0.0807, 0.0759, 0.0829, 0.088, 0.0885, 0.0872, 0.0872, 0.0889, 0.0873, 0.0866, 0.0862, 0.0859, 0.0837, 0.0768, 0.0798, 0.0859, 0.0893, 0.0901, 0.0903, 0.0914, 0.092, 0.0919, 0.0919, 0.092, 0.0918, 0.0929, 0.0933, 0.0937, 0.0941, 0.0943, 0.095, 0.0947, 0.0954, 0.096, 0.0963, 0.0956, 0.0952, 0.0966, 0.0958, 0.0955, 0.0962, 0.0978, 0.0963, 0.0919, 0.0929, 0.0924, 0.0988, 0.1022, 0.112], label='2 classes per device')
plt.plot(np.arange(1,51), [0.0866, 0.0868, 0.0885, 0.0888, 0.089, 0.089, 0.0889, 0.0889, 0.0889, 0.0889, 0.0891, 0.089, 0.089, 0.0891, 0.0889, 0.0889, 0.089, 0.0889, 0.0888, 0.0888, 0.0885, 0.0881, 0.0887, 0.0888, 0.0889, 0.0889, 0.0885, 0.0881, 0.0889, 0.0887, 0.0889, 0.0887, 0.0888, 0.0887, 0.0888, 0.0885, 0.0882, 0.0886, 0.0895, 0.0931, 0.0941, 0.0955, 0.0966, 0.0987, 0.11, 0.1219, 0.1106, 0.1154, 0.1286, 0.1379], label='5 classes per device')

plt.xlabel('rounds')
plt.ylabel('accuracy')

plt.title("Full gradient descent")

plt.legend(loc=2)

plt.savefig('graphs/fgd.png')





fig = plt.figure()

x = np.linspace(1, 10, 100)

plt.plot(np.arange(1,51), [0.1135, 0.0982, 0.101, 0.1212, 0.1028, 0.0974, 0.0994, 0.0974, 0.1467, 0.1135, 0.0974, 0.1135, 0.0974, 0.1121, 0.0958, 0.1028, 0.1324, 0.1699, 0.1028, 0.1022, 0.1367, 0.2072, 0.1135, 0.1926, 0.098, 0.0892, 0.1032, 0.161, 0.101, 0.1877, 0.0958, 0.1135, 0.1968, 0.1898, 0.1035, 0.132, 0.1582, 0.098, 0.1218, 0.0958, 0.1496, 0.248, 0.1371, 0.1078, 0.1863, 0.1307, 0.0927, 0.1711, 0.2433, 0.1595], label='epoch = 5')
plt.plot(np.arange(1,51), [0.1135, 0.0982, 0.101, 0.1331, 0.1028, 0.0974, 0.0984, 0.0974, 0.1498, 0.1135, 0.0974, 0.1135, 0.0974, 0.1078, 0.0958, 0.1028, 0.1358, 0.1877, 0.1028, 0.101, 0.1559, 0.2015, 0.1135, 0.1878, 0.098, 0.0892, 0.1032, 0.1526, 0.101, 0.1845, 0.0958, 0.1135, 0.1827, 0.1688, 0.1005, 0.1193, 0.1663, 0.098, 0.1231, 0.0958, 0.1325, 0.2527, 0.1298, 0.0958, 0.1883, 0.1166, 0.0909, 0.1818, 0.2305, 0.1969], label='epoch = 10')
plt.plot(np.arange(1,51), [0.114, 0.0982, 0.101, 0.1501, 0.1028, 0.0974, 0.098, 0.0974, 0.1648, 0.1135, 0.0974, 0.1139, 0.0974, 0.1044, 0.0958, 0.1028, 0.148, 0.152, 0.1028, 0.1009, 0.1349, 0.1855, 0.1135, 0.1864, 0.098, 0.0892, 0.1032, 0.1598, 0.101, 0.167, 0.0958, 0.1142, 0.1415, 0.1364, 0.0995, 0.1206, 0.1358, 0.098, 0.1481, 0.0958, 0.1116, 0.2436, 0.1166, 0.0935, 0.1901, 0.105, 0.09, 0.1839, 0.2151, 0.2074], label='epoch = 20')

plt.xlabel('rounds')
plt.ylabel('accuracy')

plt.title("1 class of data")

plt.legend(loc=2)

plt.savefig('graphs/epoch_1.png')





fig = plt.figure()

x = np.linspace(1, 10, 100)

plt.plot(np.arange(1,51), [0.1033, 0.1527, 0.1983, 0.2657, 0.2687, 0.3798, 0.4159, 0.4905, 0.5232, 0.5271, 0.5391, 0.534, 0.5536, 0.6495, 0.4299, 0.6196, 0.4558, 0.5756, 0.6736, 0.6302, 0.5431, 0.7276, 0.7201, 0.6655, 0.631, 0.6261, 0.6115, 0.6628, 0.6334, 0.6271, 0.5577, 0.6356, 0.6527, 0.643, 0.7827, 0.7179, 0.7427, 0.7025, 0.8061, 0.7277, 0.7648, 0.7895, 0.7229, 0.7944, 0.6612, 0.755, 0.8076, 0.8134, 0.8193, 0.6134], label='epoch = 5')
plt.plot(np.arange(1,51), [0.2218, 0.1841, 0.2327, 0.3695, 0.3252, 0.3962, 0.3719, 0.5338, 0.5981, 0.5726, 0.5769, 0.6373, 0.6008, 0.6885, 0.5146, 0.6769, 0.5341, 0.612, 0.7087, 0.6747, 0.5652, 0.7773, 0.7563, 0.7077, 0.6927, 0.6648, 0.6615, 0.7074, 0.7092, 0.6527, 0.6018, 0.6547, 0.7129, 0.6551, 0.8015, 0.7533, 0.7852, 0.7408, 0.8488, 0.7685, 0.8021, 0.8352, 0.7784, 0.8306, 0.7103, 0.8066, 0.8407, 0.8558, 0.8565, 0.6761], label='epoch = 10')
plt.plot(np.arange(1,51), [0.1987, 0.1912, 0.3001, 0.391, 0.3291, 0.4001, 0.4251, 0.5733, 0.6391, 0.6155, 0.5993, 0.7011, 0.6453, 0.7229, 0.5749, 0.6827, 0.6233, 0.6555, 0.7536, 0.7221, 0.5857, 0.7835, 0.751, 0.7332, 0.7345, 0.6871, 0.6602, 0.7792, 0.7519, 0.6683, 0.6394, 0.6683, 0.7406, 0.6928, 0.8402, 0.7899, 0.8379, 0.7723, 0.8799, 0.7891, 0.8272, 0.8617, 0.7927, 0.8507, 0.739, 0.8614, 0.8586, 0.8741, 0.8711, 0.701], label='epoch = 20')

plt.xlabel('rounds')
plt.ylabel('accuracy')

plt.title("2 classes of data")

plt.legend(loc=2)

plt.savefig('graphs/epoch_2.png')





fig = plt.figure()

x = np.linspace(1, 10, 100)

plt.plot(np.arange(1,51), [0.1155, 0.1817, 0.2765, 0.3686, 0.4145, 0.7319, 0.7136, 0.7476, 0.7064, 0.7786, 0.6914, 0.8402, 0.8556, 0.8125, 0.7269, 0.8495, 0.7444, 0.8704, 0.8259, 0.8331, 0.8624, 0.8609, 0.674, 0.8894, 0.8575, 0.9011, 0.871, 0.8941, 0.8185, 0.8593, 0.8644, 0.8728, 0.9098, 0.8916, 0.9143, 0.8888, 0.8378, 0.8567, 0.9158, 0.8362, 0.9078, 0.9013, 0.921, 0.9267, 0.84, 0.9233, 0.8015, 0.8813, 0.9175, 0.9162], label='epoch = 5')
plt.plot(np.arange(1,51), [0.1661, 0.3758, 0.4249, 0.4698, 0.519, 0.8294, 0.798, 0.84, 0.8088, 0.8361, 0.7601, 0.8473, 0.8905, 0.8561, 0.7711, 0.8858, 0.7903, 0.9047, 0.8752, 0.8662, 0.9067, 0.8993, 0.7436, 0.9131, 0.8967, 0.923, 0.8927, 0.9201, 0.8641, 0.8838, 0.8872, 0.9018, 0.9336, 0.9171, 0.9314, 0.9192, 0.8623, 0.9097, 0.9296, 0.8796, 0.9316, 0.9254, 0.938, 0.9406, 0.8662, 0.9381, 0.8286, 0.8881, 0.931, 0.9321], label='epoch = 10')
plt.plot(np.arange(1,51), [0.3645, 0.543, 0.4505, 0.5854, 0.6753, 0.8728, 0.8449, 0.8759, 0.8551, 0.8806, 0.8126, 0.8932, 0.9148, 0.8895, 0.8142, 0.9044, 0.8182, 0.9258, 0.9034, 0.8996, 0.9231, 0.9256, 0.7804, 0.9264, 0.9208, 0.9344, 0.9089, 0.9349, 0.8821, 0.8948, 0.9152, 0.9074, 0.9442, 0.9335, 0.9437, 0.9279, 0.8925, 0.9209, 0.9391, 0.9073, 0.9445, 0.9357, 0.9458, 0.9486, 0.8876, 0.9486, 0.8464, 0.8628, 0.9468, 0.9422], label='epoch = 20')

plt.xlabel('rounds')
plt.ylabel('accuracy')

plt.title("5 classes of data")

plt.legend(loc=2)

plt.savefig('graphs/epoch_5.png')





fig = plt.figure()

x = np.linspace(1, 10, 100)

plt.plot(np.arange(1,51), [0.0859, 0.0859, 0.0861, 0.0862, 0.0865, 0.0867, 0.0868, 0.0869, 0.0868, 0.0867, 0.0867, 0.0867, 0.0868, 0.087, 0.0873, 0.0873, 0.0875, 0.0875, 0.0875, 0.0876, 0.0876, 0.0874, 0.0873, 0.0874, 0.0876, 0.0877, 0.0879, 0.0879, 0.0882, 0.0882, 0.0883, 0.0884, 0.0884, 0.0883, 0.0884, 0.0885, 0.0888, 0.089, 0.0893, 0.0894, 0.0895, 0.0897, 0.0898, 0.0899, 0.0901, 0.0902, 0.0902, 0.0901, 0.0901, 0.0905], label='1 class per device')
plt.plot(np.arange(1,51), [0.0856, 0.0856, 0.0856, 0.0857, 0.0857, 0.0857, 0.0857, 0.0856, 0.0855, 0.0853, 0.0854, 0.0853, 0.0853, 0.085, 0.0847, 0.0846, 0.0846, 0.0843, 0.0841, 0.0841, 0.0841, 0.0837, 0.0838, 0.084, 0.0841, 0.0838, 0.0842, 0.0845, 0.084, 0.0853, 0.0847, 0.0851, 0.0859, 0.0867, 0.0873, 0.089, 0.0904, 0.0904, 0.093, 0.0958, 0.1003, 0.104, 0.1086, 0.1145, 0.1207, 0.1269, 0.1333, 0.1365, 0.1395, 0.1419], label='5 classes per device')
plt.plot(np.arange(1,51), [0.0854, 0.0854, 0.0855, 0.0854, 0.0852, 0.0848, 0.0847, 0.0843, 0.0842, 0.0841, 0.0839, 0.0837, 0.0833, 0.0832, 0.083, 0.0829, 0.0829, 0.0827, 0.0824, 0.0821, 0.0823, 0.082, 0.0813, 0.0813, 0.0817, 0.0813, 0.0817, 0.0819, 0.0822, 0.0827, 0.0825, 0.084, 0.0856, 0.0866, 0.0892, 0.0934, 0.0979, 0.1019, 0.1071, 0.114, 0.1195, 0.1263, 0.1297, 0.1344, 0.1385, 0.1415, 0.143, 0.1443, 0.1461, 0.146], label='IID')

plt.xlabel('rounds')
plt.ylabel('accuracy')

plt.title("E = 1, B = 60, F = 1, D = 1000")

plt.legend(loc=2)

plt.savefig('graphs/problem_fedavg.png')





fig = plt.figure()

x = np.linspace(1, 10, 100)

plt.plot(np.arange(1,51), [0.1135, 0.0982, 0.101, 0.1172, 0.1028, 0.0974, 0.1014, 0.0974, 0.1459, 0.1135, 0.0974, 0.1135, 0.0974, 0.1127, 0.0958, 0.1028, 0.1367, 0.1665, 0.1028, 0.1039, 0.1573, 0.2373, 0.1135, 0.1963, 0.098, 0.0892, 0.1032, 0.16, 0.101, 0.1887, 0.0958, 0.1135, 0.2119, 0.1889, 0.1137, 0.1256, 0.1868, 0.098, 0.1447, 0.0958, 0.1625, 0.242, 0.1304, 0.1113, 0.1893, 0.1276, 0.0928, 0.1763, 0.238, 0.1623], label='1 class per device')
plt.plot(np.arange(1,51), [0.1045, 0.1011, 0.1342, 0.1028, 0.0946, 0.1332, 0.1237, 0.1032, 0.2206, 0.0892, 0.1652, 0.0967, 0.1135, 0.0979, 0.1172, 0.1122, 0.0974, 0.098, 0.1067, 0.1028, 0.1009, 0.1011, 0.1015, 0.235, 0.1029, 0.1028, 0.1425, 0.1904, 0.1259, 0.1033, 0.1447, 0.1032, 0.2817, 0.1721, 0.1922, 0.1029, 0.099, 0.0982, 0.109, 0.114, 0.2313, 0.1035, 0.105, 0.0959, 0.1046, 0.1722, 0.1022, 0.2119, 0.1503, 0.2477], label='2 classes per device')
plt.plot(np.arange(1,51), [0.1032, 0.1012, 0.0892, 0.1843, 0.1182, 0.18, 0.0959, 0.1397, 0.1135, 0.1284, 0.0988, 0.179, 0.2002, 0.1891, 0.0958, 0.135, 0.1048, 0.1215, 0.1579, 0.1128, 0.1708, 0.0983, 0.0973, 0.1135, 0.2145, 0.2459, 0.0958, 0.0919, 0.1567, 0.1155, 0.1032, 0.1019, 0.098, 0.2223, 0.0963, 0.1157, 0.1356, 0.2538, 0.0892, 0.1025, 0.1683, 0.1834, 0.154, 0.2508, 0.2039, 0.3409, 0.0958, 0.1322, 0.1263, 0.2491], label='5 classes per device')

plt.xlabel('rounds')
plt.ylabel('accuracy')

plt.title("Max data per device = 200, 100 devices")

plt.legend(loc=2)

plt.savefig('graphs/num_device_1.png')





fig = plt.figure()

x = np.linspace(1, 10, 100)

plt.plot(np.arange(1,51), [0.1032, 0.0974, 0.0958, 0.098, 0.0982, 0.0958, 0.1317, 0.0958, 0.2186, 0.1032, 0.0979, 0.2436, 0.0958, 0.1705, 0.1824, 0.0982, 0.0958, 0.1564, 0.174, 0.1741, 0.1545, 0.2031, 0.1039, 0.0958, 0.098, 0.1163, 0.0982, 0.1716, 0.0958, 0.1006, 0.1032, 0.0982, 0.206, 0.0974, 0.147, 0.1033, 0.2213, 0.1532, 0.1182, 0.1083, 0.2046, 0.1958, 0.1523, 0.1848, 0.1825, 0.2334, 0.1928, 0.2283, 0.3343, 0.123], label='1 class per device')
plt.plot(np.arange(1,51), [0.0958, 0.2245, 0.1572, 0.3004, 0.3618, 0.303, 0.4381, 0.3771, 0.5688, 0.5468, 0.5536, 0.4217, 0.4703, 0.6019, 0.6528, 0.6075, 0.5998, 0.5198, 0.6812, 0.4676, 0.6304, 0.67, 0.6346, 0.7118, 0.7097, 0.7001, 0.7381, 0.6357, 0.6156, 0.7141, 0.6256, 0.5264, 0.739, 0.749, 0.7027, 0.7501, 0.6723, 0.6861, 0.798, 0.7411, 0.7555, 0.7493, 0.7594, 0.7677, 0.8133, 0.7423, 0.7254, 0.8004, 0.7714, 0.7732], label='2 classes per device')
plt.plot(np.arange(1,51), [0.1136, 0.1725, 0.3371, 0.4389, 0.369, 0.3191, 0.391, 0.3878, 0.4177, 0.5427, 0.585, 0.6154, 0.6473, 0.6344, 0.6483, 0.5906, 0.616, 0.5859, 0.6822, 0.7282, 0.728, 0.7296, 0.685, 0.641, 0.6944, 0.7613, 0.7516, 0.7692, 0.7483, 0.7221, 0.6565, 0.7794, 0.7605, 0.7939, 0.8042, 0.7735, 0.814, 0.7851, 0.814, 0.791, 0.8123, 0.8093, 0.8294, 0.7715, 0.7947, 0.834, 0.8284, 0.8271, 0.791, 0.815], label='5 classes per device')

plt.xlabel('rounds')
plt.ylabel('accuracy')

plt.title("Max data per device = 200, 200 devices")

plt.legend(loc=2)

plt.savefig('graphs/num_device_2.png')





fig = plt.figure()

x = np.linspace(1, 10, 100)

plt.plot(np.arange(1,51), [0.0937, 0.1207, 0.1766, 0.1769, 0.1792, 0.3386, 0.3386, 0.3395, 0.3244, 0.3557, 0.2797, 0.3471, 0.3732, 0.3537, 0.3181, 0.3688, 0.3432, 0.3718, 0.3687, 0.3722, 0.3747, 0.3738, 0.2834, 0.3745, 0.3762, 0.3811, 0.3769, 0.3769, 0.3541, 0.3652, 0.3772, 0.3761, 0.3841, 0.3792, 0.3835, 0.3804, 0.3738, 0.3719, 0.3812, 0.3739, 0.3833, 0.3807, 0.3851, 0.3832, 0.375, 0.3826, 0.3473, 0.3768, 0.3834, 0.3824], label='1 class per device')
plt.plot(np.arange(1,51), [0.1135, 0.121, 0.206, 0.3575, 0.4999, 0.4621, 0.5614, 0.543, 0.6166, 0.6204, 0.6488, 0.6652, 0.6718, 0.6819, 0.6686, 0.6822, 0.6906, 0.6746, 0.6611, 0.7044, 0.6881, 0.6393, 0.7082, 0.7146, 0.7069, 0.6946, 0.7046, 0.7104, 0.6789, 0.7251, 0.7218, 0.7212, 0.7307, 0.7248, 0.7295, 0.7258, 0.7259, 0.7209, 0.6724, 0.6907, 0.7315, 0.7235, 0.7034, 0.7351, 0.7372, 0.7395, 0.7426, 0.7375, 0.7448, 0.7361], label='2 classes per device')
plt.plot(np.arange(1,51), [0.1091, 0.0984, 0.2123, 0.3968, 0.6267, 0.5593, 0.684, 0.7743, 0.7553, 0.803, 0.7788, 0.8164, 0.8357, 0.7883, 0.8442, 0.8066, 0.7774, 0.8604, 0.8379, 0.7987, 0.8353, 0.871, 0.8763, 0.8575, 0.87, 0.8218, 0.8854, 0.8807, 0.8925, 0.8742, 0.8932, 0.8696, 0.8935, 0.9015, 0.9012, 0.8528, 0.9035, 0.9065, 0.8762, 0.8188, 0.9109, 0.911, 0.906, 0.9139, 0.9079, 0.9007, 0.9145, 0.9177, 0.918, 0.891], label='5 classes per device')

plt.xlabel('rounds')
plt.ylabel('accuracy')

plt.title("Max data per device = 200, 300 devices")

plt.legend(loc=2)

plt.savefig('graphs/num_device_5.png')





fig = plt.figure()

x = np.linspace(1, 10, 100)

plt.plot(np.arange(1,51), [0.1135, 0.0982, 0.1008, 0.1011, 0.1028, 0.0974, 0.1293, 0.0974, 0.1394, 0.1117, 0.093, 0.1176, 0.0974, 0.118, 0.1332, 0.1322, 0.1557, 0.1175, 0.1153, 0.1562, 0.1577, 0.1886, 0.1865, 0.1953, 0.098, 0.0892, 0.1032, 0.1435, 0.101, 0.119, 0.0958, 0.1139, 0.1838, 0.1262, 0.2415, 0.1509, 0.2184, 0.098, 0.1286, 0.0958, 0.1878, 0.2062, 0.1868, 0.1196, 0.1856, 0.2042, 0.1002, 0.1752, 0.192, 0.1133], label='lr = 0.001')
plt.plot(np.arange(1,51), [0.1135, 0.0982, 0.101, 0.1331, 0.1028, 0.0974, 0.0984, 0.0974, 0.1498, 0.1135, 0.0974, 0.1135, 0.0974, 0.1078, 0.0958, 0.1028, 0.1358, 0.1877, 0.1028, 0.101, 0.1559, 0.2015, 0.1135, 0.1878, 0.098, 0.0892, 0.1032, 0.1526, 0.101, 0.1845, 0.0958, 0.1135, 0.1827, 0.1688, 0.1005, 0.1193, 0.1663, 0.098, 0.1231, 0.0958, 0.1325, 0.2527, 0.1298, 0.0958, 0.1883, 0.1166, 0.0909, 0.1818, 0.2305, 0.1969], label='lr = 0.01')
plt.plot(np.arange(1,51), [0.1135, 0.0982, 0.101, 0.1009, 0.1028, 0.0974, 0.1531, 0.101, 0.0926, 0.1136, 0.0974, 0.1135, 0.1369, 0.109, 0.1703, 0.1028, 0.0975, 0.2208, 0.1965, 0.2714, 0.3126, 0.3422, 0.3197, 0.2637, 0.158, 0.2202, 0.1108, 0.17, 0.101, 0.2057, 0.3026, 0.3629, 0.4033, 0.2139, 0.2371, 0.2725, 0.4439, 0.4032, 0.5228, 0.3746, 0.3913, 0.4442, 0.6414, 0.6165, 0.4013, 0.5041, 0.3715, 0.5302, 0.5831, 0.4688], label='lr = 0.1')

plt.xlabel('rounds')
plt.ylabel('accuracy')

plt.title("1 class of data")

plt.legend(loc=2)

plt.savefig('graphs/lr_1.png')





fig = plt.figure()

x = np.linspace(1, 10, 100)

plt.plot(np.arange(1,51), [0.058, 0.0996, 0.1057, 0.1009, 0.139, 0.1542, 0.1561, 0.186, 0.2404, 0.2834, 0.2869, 0.2178, 0.1962, 0.2689, 0.2147, 0.3851, 0.2926, 0.3942, 0.4138, 0.3741, 0.3083, 0.6023, 0.4335, 0.3893, 0.3173, 0.4439, 0.2915, 0.4384, 0.3975, 0.3704, 0.2864, 0.3518, 0.5066, 0.288, 0.5731, 0.3663, 0.5755, 0.4845, 0.5454, 0.4003, 0.5462, 0.5711, 0.4194, 0.6055, 0.4699, 0.4465, 0.5524, 0.5914, 0.6152, 0.3677], label='lr = 0.001')
plt.plot(np.arange(1,51), [0.2218, 0.1841, 0.2327, 0.3695, 0.3252, 0.3962, 0.3719, 0.5338, 0.5981, 0.5726, 0.5769, 0.6373, 0.6008, 0.6885, 0.5146, 0.6769, 0.5341, 0.612, 0.7087, 0.6747, 0.5652, 0.7773, 0.7563, 0.7077, 0.6927, 0.6648, 0.6615, 0.7074, 0.7092, 0.6527, 0.6018, 0.6547, 0.7129, 0.6551, 0.8015, 0.7533, 0.7852, 0.7408, 0.8488, 0.7685, 0.8021, 0.8352, 0.7784, 0.8306, 0.7103, 0.8066, 0.8407, 0.8558, 0.8565, 0.6761], label='lr = 0.01')
plt.plot(np.arange(1,51), [0.3036, 0.1933, 0.2519, 0.3917, 0.3058, 0.3721, 0.2812, 0.6717, 0.6422, 0.7005, 0.7923, 0.852, 0.7835, 0.805, 0.7293, 0.6839, 0.8126, 0.7708, 0.875, 0.8669, 0.7651, 0.8894, 0.9142, 0.8501, 0.8108, 0.8401, 0.9075, 0.9048, 0.8453, 0.7645, 0.776, 0.8069, 0.8473, 0.8687, 0.9357, 0.9264, 0.9352, 0.9198, 0.9483, 0.9386, 0.9449, 0.9435, 0.9415, 0.9502, 0.8948, 0.9442, 0.9446, 0.953, 0.9524, 0.9201], label='lr = 0.1')

plt.xlabel('rounds')
plt.ylabel('accuracy')

plt.title("2 classes of data")

plt.legend(loc=2)

plt.savefig('graphs/lr_2.png')





fig = plt.figure()

x = np.linspace(1, 10, 100)

plt.plot(np.arange(1,51), [0.0889, 0.0892, 0.0892, 0.0892, 0.0902, 0.0987, 0.1026, 0.1123, 0.1365, 0.1368, 0.1602, 0.2442, 0.2135, 0.2181, 0.1882, 0.4875, 0.3933, 0.4022, 0.3568, 0.4572, 0.4751, 0.4942, 0.3886, 0.562, 0.5853, 0.7613, 0.6369, 0.6542, 0.5254, 0.5597, 0.6959, 0.7376, 0.8065, 0.7567, 0.8125, 0.746, 0.6435, 0.6475, 0.7677, 0.6639, 0.8294, 0.7923, 0.8339, 0.8358, 0.683, 0.7786, 0.5456, 0.836, 0.7822, 0.7883], label='lr = 0.001')
plt.plot(np.arange(1,51), [0.1661, 0.3758, 0.4249, 0.4698, 0.519, 0.8294, 0.798, 0.84, 0.8088, 0.8361, 0.7601, 0.8473, 0.8905, 0.8561, 0.7711, 0.8858, 0.7903, 0.9047, 0.8752, 0.8662, 0.9067, 0.8993, 0.7436, 0.9131, 0.8967, 0.923, 0.8927, 0.9201, 0.8641, 0.8838, 0.8872, 0.9018, 0.9336, 0.9171, 0.9314, 0.9192, 0.8623, 0.9097, 0.9296, 0.8796, 0.9316, 0.9254, 0.938, 0.9406, 0.8662, 0.9381, 0.8286, 0.8881, 0.931, 0.9321], label='lr = 0.01')
plt.plot(np.arange(1,51), [0.4573, 0.7314, 0.4779, 0.8496, 0.7808, 0.8386, 0.9146, 0.8949, 0.8242, 0.9121, 0.8609, 0.898, 0.9441, 0.9385, 0.9066, 0.9125, 0.8587, 0.9496, 0.9621, 0.9595, 0.9633, 0.9613, 0.8868, 0.9598, 0.9628, 0.9697, 0.9633, 0.9677, 0.9558, 0.9539, 0.9651, 0.9703, 0.974, 0.9722, 0.9752, 0.9693, 0.9585, 0.9681, 0.9746, 0.9629, 0.9762, 0.9677, 0.976, 0.9774, 0.964, 0.9778, 0.9112, 0.9685, 0.9756, 0.9772], label='lr = 0.1')

plt.xlabel('rounds')
plt.ylabel('accuracy')

plt.title("5 classes of data")

plt.legend(loc=2)

plt.savefig('graphs/lr_5.png')





fig = plt.figure()

x = np.linspace(1, 10, 100)

plt.plot(np.arange(1,51), [0.4048, 0.1014, 0.2075, 0.316, 0.2733, 0.1868, 0.3677, 0.2985, 0.4493, 0.2831, 0.2758, 0.4985, 0.3947, 0.4638, 0.3506, 0.3884, 0.4473, 0.4478, 0.3395, 0.4542, 0.397, 0.5647, 0.5405, 0.4947, 0.3922, 0.3233, 0.4106, 0.5275, 0.3758, 0.4575, 0.4351, 0.4775, 0.6771, 0.4172, 0.6216, 0.5763, 0.5704, 0.5738, 0.6106, 0.6165, 0.6011, 0.6018, 0.5537, 0.6598, 0.5504, 0.6072, 0.5354, 0.6414, 0.6806, 0.6061], label='1 class per device')
plt.plot(np.arange(1,51), [0.5082, 0.2074, 0.5656, 0.5531, 0.5336, 0.4487, 0.5278, 0.7046, 0.7207, 0.7434, 0.7258, 0.7712, 0.7034, 0.7784, 0.6619, 0.7709, 0.6859, 0.6938, 0.7729, 0.7613, 0.6673, 0.8296, 0.8109, 0.7488, 0.7573, 0.7326, 0.7487, 0.7841, 0.7632, 0.7202, 0.6935, 0.7245, 0.7732, 0.7246, 0.8485, 0.8082, 0.8386, 0.79, 0.8754, 0.808, 0.8549, 0.8597, 0.8127, 0.8535, 0.7391, 0.8317, 0.8597, 0.8707, 0.8739, 0.7216], label='2 classes per device')
plt.plot(np.arange(1,51), [0.7107, 0.7493, 0.5039, 0.6993, 0.6928, 0.8725, 0.861, 0.8607, 0.8674, 0.8728, 0.822, 0.9083, 0.9154, 0.8925, 0.8245, 0.9216, 0.84, 0.9136, 0.9097, 0.9073, 0.92, 0.9156, 0.8075, 0.9291, 0.9197, 0.938, 0.9198, 0.9261, 0.8838, 0.9, 0.9278, 0.9291, 0.9446, 0.9383, 0.9475, 0.9365, 0.897, 0.9199, 0.9461, 0.9046, 0.9472, 0.9361, 0.9499, 0.9513, 0.8954, 0.9488, 0.8488, 0.9029, 0.9445, 0.9468], label='5 classes per device')

plt.xlabel('rounds')
plt.ylabel('accuracy')

plt.title("Performance with pre-trained model to 60.8% accuracy")

plt.legend(loc=2)

plt.savefig('graphs/pretrain_accuracy.png')




fig = plt.figure()

x = np.linspace(1, 10, 100)

plt.plot(np.arange(1,51), [1.7523113420814465, 2.402301461833298, 2.7969519347901555, 2.1831317198504308, 1.8276722142650823, 2.400861350594053, 1.7844842368630087, 1.7136643957939877, 1.7671703920242892, 2.0267537361497334, 2.453099767873242, 1.568249235487288, 1.6245150406649158, 1.5694416844920747, 1.8218863154672513, 1.5997411574527716, 1.5473817943767378, 1.5177369770730378, 1.6966932480502281, 1.6884889860821377, 1.5257567296362227, 1.3521762129607473, 1.4227367928073664, 1.484387827147344, 1.6218348551707662, 1.6399278747048347, 1.508681175815072, 1.392887927923992, 1.8179886303130228, 1.5444352323082602, 1.5318343047123806, 1.3500936198386417, 1.0895746228801217, 1.4888402329888313, 1.121683828390328, 1.1858894411166003, 1.1853607756317042, 1.221671888023425, 1.1073399053257742, 1.1636492116436077, 1.1274971802523182, 1.1929426929753297, 1.2853658055044284, 1.0487003371973707, 1.2097538045257519, 1.085612948153429, 1.3415396243903288, 1.0600661946709748, 0.9472914622847441, 1.1077302565240557], label='1 class per device')
plt.plot(np.arange(1,51), [1.4615436329203806, 2.581672342719546, 1.2307421515701682, 1.1733357109081972, 1.2540070767615252, 1.7733778346116376, 1.2931558975748196, 0.8289188478782679, 0.8427255977490905, 0.7618411217525507, 0.7828161674699966, 0.7209249298284008, 0.883567471413096, 0.6532182023403751, 0.8775518882046839, 0.649118501289635, 0.840508106977317, 0.8038431409817592, 0.6493756913455428, 0.6687061851191672, 0.9479364441458586, 0.5190249834280865, 0.5521524956651555, 0.7453948435889688, 0.6736161010280536, 0.7636936268988689, 0.6708905282104092, 0.5798821038311455, 0.6942121756684249, 0.7525724457327727, 0.8833215868776771, 0.704940569438752, 0.6179830422446986, 0.7789655270849823, 0.45054647264776715, 0.5646433448715574, 0.44338321804430836, 0.5797848463248295, 0.3890212990675762, 0.5431458732694577, 0.42638575641592596, 0.41589883700677543, 0.50255643571638, 0.42227285208216137, 0.680160788024307, 0.4536730929924424, 0.3986978487224336, 0.3773533067885478, 0.3705207240666933, 0.7727318736398296], label='2 classes per device')
plt.plot(np.arange(1,51), [0.9257607482800818, 0.7137654698958062, 1.7579932926566737, 0.8376573531111334, 0.8559690846759043, 0.40186486685067224, 0.40369817505406724, 0.3892150042448074, 0.3735213947429019, 0.36449349916000273, 0.509270581897277, 0.27724511742259667, 0.2620887484425192, 0.3137108774108302, 0.4716244039546912, 0.2387442991469696, 0.42189778102810976, 0.25435064925224915, 0.25983484838584997, 0.26363495088354416, 0.23946866085812166, 0.25097356787675124, 0.5756825824167319, 0.21173513408714703, 0.2322268593273345, 0.18388142381871866, 0.23897305894998988, 0.22124605926619784, 0.3374540500319118, 0.28575993056414994, 0.21333506355168902, 0.2023069013954158, 0.16464139558196922, 0.18252953692119878, 0.15691281496517503, 0.19294078253019767, 0.29248736149803467, 0.24298520202920504, 0.16642517860753425, 0.27463463406748834, 0.15865856828316335, 0.18836522389464316, 0.1505975133656364, 0.1483714151727095, 0.2999280023086033, 0.1538355009834976, 0.4778633117675781, 0.2764470124510443, 0.16771971582951153, 0.16341427044948906], label='5 classes per device')

plt.xlabel('rounds')
plt.ylabel('loss')

plt.title("Performance with pre-trained model to 60.8% accuracy")

plt.legend(loc=2)

plt.savefig('graphs/pretrain_loss.png')






fig = plt.figure()

x = np.linspace(1, 10, 100)

plt.plot(np.arange(1,51), [0.1135, 0.0982, 0.101, 0.1331, 0.1028, 0.0974, 0.0984, 0.0974, 0.1498, 0.1135, 0.0974, 0.1135, 0.0974, 0.1078, 0.0958, 0.1028, 0.1358, 0.1877, 0.1028, 0.101, 0.1559, 0.2015, 0.1135, 0.1878, 0.098, 0.0892, 0.1032, 0.1526, 0.101, 0.1845, 0.0958, 0.1135, 0.1827, 0.1688, 0.1005, 0.1193, 0.1663, 0.098, 0.1231, 0.0958, 0.1325, 0.2527, 0.1298, 0.0958, 0.1883, 0.1166, 0.0909, 0.1818, 0.2305, 0.1969], label='SGD')
plt.plot(np.arange(1,51), [0.0981, 0.0982, 0.1009, 0.1009, 0.101, 0.0974, 0.098, 0.0974, 0.1028, 0.1135, 0.0974, 0.101, 0.0974, 0.0892, 0.0958, 0.1009, 0.0982, 0.101, 0.1028, 0.1032, 0.098, 0.1028, 0.1135, 0.101, 0.098, 0.0892, 0.1032, 0.0958, 0.101, 0.0982, 0.0958, 0.1135, 0.101, 0.1028, 0.098, 0.0958, 0.0982, 0.098, 0.1009, 0.0958, 0.098, 0.1028, 0.1135, 0.0892, 0.0982, 0.1009, 0.0892, 0.1009, 0.0982, 0.0974], label='Momentum = 0.9')
plt.plot(np.arange(1,51), [0.2004, 0.0982, 0.101, 0.1028, 0.1028, 0.0892, 0.1022, 0.0974, 0.0971, 0.1028, 0.0975, 0.1135, 0.0974, 0.1028, 0.1028, 0.1028, 0.1028, 0.1028, 0.1028, 0.1028, 0.1028, 0.1028, 0.1028, 0.1028, 0.101, 0.1028, 0.1028, 0.1028, 0.1028, 0.1028, 0.1028, 0.1028, 0.1028, 0.1028, 0.1028, 0.0982, 0.1267, 0.1004, 0.1028, 0.1028, 0.0974, 0.1028, 0.1028, 0.1135, 0.0982, 0.0982, 0.0982, 0.1028, 0.0982, 0.0982], label='Adagrad')
plt.plot(np.arange(1,51), [0.0982, 0.1135, 0.101, 0.1028, 0.1028, 0.0892, 0.0892, 0.0974, 0.0892, 0.0974, 0.0974, 0.1135, 0.0974, 0.0974, 0.0974, 0.0974, 0.0974, 0.0974, 0.1028, 0.1028, 0.1028, 0.1028, 0.1028, 0.1028, 0.1028, 0.098, 0.098, 0.1028, 0.101, 0.101, 0.101, 0.1028, 0.1135, 0.1028, 0.1028, 0.0982, 0.0982, 0.098, 0.098, 0.0982, 0.098, 0.0982, 0.0982, 0.0982, 0.0982, 0.0982, 0.0982, 0.098, 0.0982, 0.0982], label='Adam')

plt.xlabel('rounds')
plt.ylabel('accuracy')

plt.title("1 class of data")

plt.legend(loc=2)

plt.savefig('graphs/optim_1.png')





fig = plt.figure()

x = np.linspace(1, 10, 100)

plt.plot(np.arange(1,51), [0.2218, 0.1841, 0.2327, 0.3695, 0.3252, 0.3962, 0.3719, 0.5338, 0.5981, 0.5726, 0.5769, 0.6373, 0.6008, 0.6885, 0.5146, 0.6769, 0.5341, 0.612, 0.7087, 0.6747, 0.5652, 0.7773, 0.7563, 0.7077, 0.6927, 0.6648, 0.6615, 0.7074, 0.7092, 0.6527, 0.6018, 0.6547, 0.7129, 0.6551, 0.8015, 0.7533, 0.7852, 0.7408, 0.8488, 0.7685, 0.8021, 0.8352, 0.7784, 0.8306, 0.7103, 0.8066, 0.8407, 0.8558, 0.8565, 0.6761], label='SGD')
plt.plot(np.arange(1,51), [0.2336, 0.1923, 0.1973, 0.3111, 0.2785, 0.3586, 0.1931, 0.5825, 0.5942, 0.5174, 0.6029, 0.7414, 0.8122, 0.7895, 0.7262, 0.5843, 0.7723, 0.6648, 0.8721, 0.8217, 0.8064, 0.909, 0.9334, 0.8763, 0.8492, 0.8761, 0.8825, 0.8169, 0.8, 0.6354, 0.7312, 0.7291, 0.7795, 0.8009, 0.9413, 0.9447, 0.9443, 0.9455, 0.9579, 0.9571, 0.952, 0.962, 0.9457, 0.9635, 0.9064, 0.9684, 0.9663, 0.964, 0.9667, 0.9277], label='Momentum = 0.9')
plt.plot(np.arange(1,51), [0.2284, 0.1937, 0.2979, 0.4004, 0.3636, 0.3717, 0.5527, 0.4104, 0.5397, 0.6243, 0.5352, 0.4693, 0.2992, 0.3243, 0.5672, 0.6598, 0.4353, 0.5094, 0.6078, 0.5718, 0.4727, 0.603, 0.7922, 0.6203, 0.5686, 0.6344, 0.5819, 0.6985, 0.5489, 0.5845, 0.601, 0.5758, 0.6435, 0.3133, 0.5441, 0.7236, 0.7064, 0.6547, 0.8005, 0.633, 0.7739, 0.752, 0.7, 0.6988, 0.6734, 0.517, 0.651, 0.5417, 0.4825, 0.3097], label='Adagrad')
plt.plot(np.arange(1,51), [0.1477, 0.1903, 0.1972, 0.1784, 0.2246, 0.3373, 0.203, 0.3145, 0.3533, 0.3545, 0.4421, 0.3317, 0.3849, 0.4094, 0.3103, 0.4433, 0.4351, 0.5417, 0.5945, 0.4458, 0.5186, 0.6454, 0.7499, 0.5243, 0.4858, 0.4934, 0.2795, 0.5163, 0.4389, 0.2599, 0.3297, 0.3388, 0.4843, 0.4087, 0.6295, 0.4688, 0.659, 0.5264, 0.6891, 0.5795, 0.669, 0.7533, 0.589, 0.6653, 0.5928, 0.735, 0.6304, 0.6669, 0.8001, 0.556], label='Adam')

plt.xlabel('rounds')
plt.ylabel('accuracy')

plt.title("2 classes of data")

plt.legend(loc=2)

plt.savefig('graphs/optim_2.png')





fig = plt.figure()

x = np.linspace(1, 10, 100)

plt.plot(np.arange(1,51), [0.1661, 0.3758, 0.4249, 0.4698, 0.519, 0.8294, 0.798, 0.84, 0.8088, 0.8361, 0.7601, 0.8473, 0.8905, 0.8561, 0.7711, 0.8858, 0.7903, 0.9047, 0.8752, 0.8662, 0.9067, 0.8993, 0.7436, 0.9131, 0.8967, 0.923, 0.8927, 0.9201, 0.8641, 0.8838, 0.8872, 0.9018, 0.9336, 0.9171, 0.9314, 0.9192, 0.8623, 0.9097, 0.9296, 0.8796, 0.9316, 0.9254, 0.938, 0.9406, 0.8662, 0.9381, 0.8286, 0.8881, 0.931, 0.9321], label='SGD')
plt.plot(np.arange(1,51), [0.46, 0.73, 0.4701, 0.6882, 0.6409, 0.6209, 0.7348, 0.6833, 0.5967, 0.8426, 0.7798, 0.851, 0.9033, 0.9588, 0.9347, 0.9509, 0.8552, 0.9523, 0.967, 0.9619, 0.9708, 0.967, 0.8803, 0.9634, 0.9729, 0.9735, 0.9598, 0.9742, 0.9618, 0.9731, 0.9642, 0.9538, 0.9626, 0.9453, 0.9517, 0.9753, 0.9641, 0.9754, 0.9789, 0.9702, 0.9715, 0.9778, 0.9787, 0.9796, 0.9613, 0.9733, 0.9642, 0.9674, 0.9799, 0.9767], label='Momentum = 0.9')
plt.plot(np.arange(1,51), [0.4582, 0.4444, 0.4677, 0.4708, 0.4712, 0.6001, 0.8964, 0.929, 0.8421, 0.8344, 0.6432, 0.863, 0.9039, 0.8007, 0.9056, 0.955, 0.8743, 0.9241, 0.9609, 0.9504, 0.93, 0.9219, 0.8992, 0.9337, 0.9651, 0.9683, 0.9536, 0.9326, 0.9566, 0.9267, 0.9691, 0.96, 0.9666, 0.9617, 0.9662, 0.9591, 0.9176, 0.8893, 0.9223, 0.8641, 0.9548, 0.9666, 0.9668, 0.966, 0.8928, 0.9364, 0.9318, 0.9648, 0.9476, 0.9495], label='Adagrad')
plt.plot(np.arange(1,51), [0.0892, 0.4716, 0.4729, 0.5521, 0.6933, 0.8123, 0.8887, 0.8492, 0.8472, 0.9261, 0.7232, 0.8904, 0.9211, 0.9136, 0.6051, 0.9074, 0.6053, 0.9302, 0.9117, 0.7828, 0.8741, 0.854, 0.6335, 0.892, 0.9014, 0.9163, 0.804, 0.8794, 0.7598, 0.8254, 0.7832, 0.8512, 0.868, 0.8751, 0.8972, 0.8482, 0.7712, 0.7415, 0.8847, 0.6738, 0.8801, 0.8712, 0.8813, 0.9004, 0.5764, 0.8726, 0.5824, 0.8553, 0.7813, 0.8078], label='Adam')

plt.xlabel('rounds')
plt.ylabel('accuracy')

plt.title("5 classes of data")

plt.legend(loc=2)

plt.savefig('graphs/optim_5.png')






fig = plt.figure()

x = np.linspace(1, 10, 100)

plt.plot(np.arange(1,51), [0.1135, 0.0982, 0.101, 0.1331, 0.1028, 0.0974, 0.0984, 0.0974, 0.1498, 0.1135, 0.0974, 0.1135, 0.0974, 0.1078, 0.0958, 0.1028, 0.1358, 0.1877, 0.1028, 0.101, 0.1559, 0.2015, 0.1135, 0.1878, 0.098, 0.0892, 0.1032, 0.1526, 0.101, 0.1845, 0.0958, 0.1135, 0.1827, 0.1688, 0.1005, 0.1193, 0.1663, 0.098, 0.1231, 0.0958, 0.1325, 0.2527, 0.1298, 0.0958, 0.1883, 0.1166, 0.0909, 0.1818, 0.2305, 0.1969], label='10%')
plt.plot(np.arange(1,51), [0.1333, 0.0986, 0.0896, 0.0903, 0.1135, 0.0985, 0.103, 0.1111, 0.1041, 0.098, 0.1028, 0.0892, 0.1032, 0.101, 0.1135, 0.0982, 0.161, 0.24, 0.2818, 0.1226, 0.1084, 0.099, 0.1069, 0.0999, 0.1074, 0.0892, 0.0967, 0.1168, 0.1276, 0.1799, 0.098, 0.0958, 0.1009, 0.0978, 0.1998, 0.2446, 0.1019, 0.182, 0.1558, 0.102, 0.0892, 0.1538, 0.298, 0.2124, 0.2867, 0.102, 0.2366, 0.2562, 0.098, 0.1009], label='20%')
plt.plot(np.arange(1,51), [0.0759, 0.1297, 0.1449, 0.1319, 0.1026, 0.165, 0.134, 0.1142, 0.1547, 0.0982, 0.0892, 0.0994, 0.1072, 0.17, 0.2062, 0.1138, 0.106, 0.0982, 0.1607, 0.1174, 0.251, 0.1944, 0.2739, 0.213, 0.2612, 0.1116, 0.1484, 0.1509, 0.1467, 0.3263, 0.1202, 0.1617, 0.2096, 0.1667, 0.1389, 0.2744, 0.2992, 0.1651, 0.241, 0.3011, 0.2343, 0.2685, 0.2261, 0.3481, 0.2281, 0.4515, 0.4374, 0.3094, 0.386, 0.3095], label='50%')
plt.plot(np.arange(1,51), [0.0485, 0.0661, 0.1388, 0.1761, 0.2169, 0.2394, 0.2447, 0.2716, 0.2742, 0.2993, 0.3197, 0.3357, 0.355, 0.3625, 0.3858, 0.399, 0.4121, 0.4336, 0.4492, 0.4518, 0.461, 0.4824, 0.4825, 0.5051, 0.493, 0.5253, 0.4985, 0.5357, 0.5035, 0.5401, 0.4804, 0.4889, 0.3884, 0.411, 0.2659, 0.3568, 0.2032, 0.3343, 0.2644, 0.3369, 0.2232, 0.3377, 0.2832, 0.3418, 0.2749, 0.3473, 0.3063, 0.3534, 0.3169, 0.3608], label='100%')

plt.xlabel('rounds')
plt.ylabel('accuracy')

plt.title("1 class of data")

plt.legend(loc=2)

plt.savefig('graphs/frac_device_1.png')





fig = plt.figure()

x = np.linspace(1, 10, 100)

plt.plot(np.arange(1,51), [0.2218, 0.1841, 0.2327, 0.3695, 0.3252, 0.3962, 0.3719, 0.5338, 0.5981, 0.5726, 0.5769, 0.6373, 0.6008, 0.6885, 0.5146, 0.6769, 0.5341, 0.612, 0.7087, 0.6747, 0.5652, 0.7773, 0.7563, 0.7077, 0.6927, 0.6648, 0.6615, 0.7074, 0.7092, 0.6527, 0.6018, 0.6547, 0.7129, 0.6551, 0.8015, 0.7533, 0.7852, 0.7408, 0.8488, 0.7685, 0.8021, 0.8352, 0.7784, 0.8306, 0.7103, 0.8066, 0.8407, 0.8558, 0.8565, 0.6761], label='10%')
plt.plot(np.arange(1,51), [0.1036, 0.2291, 0.3806, 0.4646, 0.4673, 0.4988, 0.4945, 0.5175, 0.638, 0.6837, 0.6677, 0.5486, 0.6882, 0.7047, 0.602, 0.6211, 0.724, 0.7622, 0.731, 0.7617, 0.7, 0.7715, 0.703, 0.7258, 0.7217, 0.7856, 0.8046, 0.7388, 0.6865, 0.731, 0.7874, 0.7477, 0.722, 0.7672, 0.8482, 0.7893, 0.7538, 0.8307, 0.8164, 0.796, 0.8331, 0.8078, 0.8312, 0.7648, 0.7989, 0.8307, 0.8568, 0.8598, 0.8583, 0.698], label='20%')
plt.plot(np.arange(1,51), [0.1326, 0.3075, 0.4721, 0.3963, 0.6338, 0.6503, 0.634, 0.6287, 0.5708, 0.6942, 0.6741, 0.6798, 0.7194, 0.6919, 0.7067, 0.7321, 0.6958, 0.7293, 0.755, 0.7853, 0.7815, 0.7699, 0.767, 0.7782, 0.798, 0.7978, 0.8113, 0.7995, 0.8136, 0.8283, 0.7899, 0.7515, 0.8433, 0.8405, 0.8409, 0.8296, 0.8218, 0.8198, 0.8333, 0.8382, 0.8535, 0.8647, 0.8665, 0.8628, 0.8614, 0.8775, 0.8756, 0.8694, 0.8765, 0.8695], label='50%')
plt.plot(np.arange(1,51), [0.1127, 0.2425, 0.4374, 0.5682, 0.6339, 0.6677, 0.6876, 0.6999, 0.7107, 0.7191, 0.7264, 0.7386, 0.7453, 0.7505, 0.7575, 0.7655, 0.7722, 0.777, 0.7826, 0.789, 0.793, 0.7991, 0.8019, 0.8079, 0.812, 0.8165, 0.821, 0.8268, 0.8308, 0.8337, 0.839, 0.8397, 0.8448, 0.8469, 0.8524, 0.852, 0.8585, 0.8591, 0.8626, 0.8641, 0.866, 0.8684, 0.871, 0.8733, 0.8744, 0.8766, 0.8781, 0.8797, 0.8804, 0.8851], label='100%')

plt.xlabel('rounds')
plt.ylabel('accuracy')

plt.title("2 classes of data")

plt.legend(loc=2)

plt.savefig('graphs/frac_device_2.png')





fig = plt.figure()

x = np.linspace(1, 10, 100)

plt.plot(np.arange(1,51), [0.1661, 0.3758, 0.4249, 0.4698, 0.519, 0.8294, 0.798, 0.84, 0.8088, 0.8361, 0.7601, 0.8473, 0.8905, 0.8561, 0.7711, 0.8858, 0.7903, 0.9047, 0.8752, 0.8662, 0.9067, 0.8993, 0.7436, 0.9131, 0.8967, 0.923, 0.8927, 0.9201, 0.8641, 0.8838, 0.8872, 0.9018, 0.9336, 0.9171, 0.9314, 0.9192, 0.8623, 0.9097, 0.9296, 0.8796, 0.9316, 0.9254, 0.938, 0.9406, 0.8662, 0.9381, 0.8286, 0.8881, 0.931, 0.9321], label='10%')
plt.plot(np.arange(1,51), [0.2093, 0.3967, 0.6681, 0.7495, 0.7274, 0.8323, 0.8494, 0.8241, 0.8365, 0.7373, 0.6539, 0.8405, 0.8895, 0.8353, 0.8988, 0.8987, 0.9084, 0.8421, 0.9122, 0.9099, 0.8907, 0.8882, 0.9028, 0.8801, 0.9245, 0.9225, 0.8899, 0.9251, 0.9248, 0.9313, 0.9152, 0.9222, 0.9256, 0.9289, 0.9317, 0.9361, 0.9199, 0.909, 0.872, 0.9068, 0.8867, 0.9115, 0.9395, 0.9353, 0.9417, 0.9399, 0.9238, 0.9321, 0.8312, 0.8561], label='20%')
plt.plot(np.arange(1,51), [0.1063, 0.6153, 0.7315, 0.7682, 0.8074, 0.839, 0.8507, 0.857, 0.8598, 0.8713, 0.8821, 0.8884, 0.8875, 0.8975, 0.8968, 0.8907, 0.8849, 0.9085, 0.9073, 0.8973, 0.8635, 0.9078, 0.9071, 0.9052, 0.9107, 0.9174, 0.9232, 0.9247, 0.9287, 0.9304, 0.9101, 0.9266, 0.9337, 0.9337, 0.9341, 0.9288, 0.9311, 0.9301, 0.937, 0.9335, 0.9353, 0.9393, 0.919, 0.94, 0.9399, 0.9317, 0.9308, 0.9405, 0.9413, 0.9437], label='50%')
plt.plot(np.arange(1,51), [0.1565, 0.5362, 0.7296, 0.8114, 0.8299, 0.8412, 0.8507, 0.8601, 0.8672, 0.8751, 0.8808, 0.8866, 0.8907, 0.8949, 0.8984, 0.9023, 0.9055, 0.9078, 0.9099, 0.9123, 0.9148, 0.9164, 0.919, 0.9203, 0.9227, 0.9252, 0.9259, 0.927, 0.9278, 0.9294, 0.931, 0.9319, 0.9326, 0.9337, 0.9343, 0.935, 0.9367, 0.9368, 0.9382, 0.9387, 0.94, 0.9404, 0.941, 0.9416, 0.9416, 0.9426, 0.9428, 0.9433, 0.9433, 0.9438], label='100%')

plt.xlabel('rounds')
plt.ylabel('accuracy')

plt.title("5 classes of data")

plt.legend(loc=2)

plt.savefig('graphs/frac_device_5.png')





fig = plt.figure() 

x = np.linspace(1, 10, 100)

plt.plot(np.arange(1,101), [0.3218, 0.4008, 0.3927, 0.4597, 0.4902, 0.5093, 0.493, 0.5403, 0.5472, 0.5932, 0.4865, 0.5752, 0.5807, 0.5183, 0.5918, 0.6253, 0.6093, 0.6185, 0.6281, 0.6152, 0.5936, 0.6212, 0.5514, 0.614, 0.5917, 0.6082, 0.6067, 0.5725, 0.6422, 0.6376, 0.6274, 0.6424, 0.6519, 0.6065, 0.6618, 0.6425, 0.6441, 0.6176, 0.637, 0.6306, 0.5952, 0.6198, 0.606, 0.6078, 0.6243, 0.6313, 0.6, 0.6163, 0.5975, 0.5933, 0.6398, 0.6424, 0.6364, 0.6159, 0.6235, 0.6026, 0.5962, 0.6414, 0.6387, 0.6108, 0.639, 0.6283, 0.5988, 0.5785, 0.6144, 0.6358, 0.6179, 0.6376, 0.639, 0.6449, 0.6468, 0.6483, 0.6467, 0.6467, 0.6458, 0.6475, 0.6467, 0.647, 0.6458, 0.6467, 0.6463, 0.6464, 0.6464, 0.6462, 0.6459, 0.6453, 0.6462, 0.6462, 0.6471, 0.6462, 0.6459, 0.6452, 0.6456, 0.646, 0.6451, 0.6442, 0.6459, 0.6464, 0.6454, 0.6448], label='Traditional ML')
plt.plot(np.arange(1,101), [0.1273, 0.1504, 0.1832, 0.2184, 0.2479, 0.2753, 0.2922, 0.3097, 0.3315, 0.343, 0.3603, 0.3709, 0.3811, 0.3937, 0.4023, 0.4047, 0.4139, 0.4161, 0.4339, 0.4265, 0.4383, 0.4389, 0.449, 0.4512, 0.4584, 0.4599, 0.4699, 0.4677, 0.4747, 0.4765, 0.4781, 0.4787, 0.4813, 0.4828, 0.4848, 0.4889, 0.4864, 0.4911, 0.4912, 0.4924, 0.4897, 0.4948, 0.4965, 0.5003, 0.4931, 0.498, 0.5023, 0.4989, 0.4988, 0.506, 0.5057, 0.5013, 0.4996, 0.5031, 0.503, 0.5015, 0.504, 0.5019, 0.5074, 0.5041, 0.5042, 0.5046, 0.5088, 0.504, 0.5087, 0.5067, 0.5072, 0.5077, 0.5102, 0.5093, 0.5131, 0.5116, 0.508, 0.5111, 0.5126, 0.5131, 0.5144, 0.5151, 0.5137, 0.5145, 0.5168, 0.5193, 0.5187, 0.5154, 0.5177, 0.5175, 0.5187, 0.5173, 0.5183, 0.5171, 0.5181, 0.5144, 0.5167, 0.5218, 0.5154, 0.5163, 0.5177, 0.5184, 0.5188, 0.5243], label='Federated Learning')

plt.xlabel('rounds')
plt.ylabel('accuracy')

plt.title("Accuracy on CIFAR-10 dataset (IID setting)")

plt.legend(loc=4)

plt.savefig('graphs/iid_cifar.png')





fig = plt.figure()

x = np.linspace(1, 10, 100)

# plt.plot(np.arange(1,11), [0.1514, 0.2342, 0.5245, 0.8135, 0.8636, 0.8914, 0.904, 0.9158, 0.9257, 0.9301], label='IID')
plt.plot(np.arange(1,101), [0.1034, 0.1, 0.1, 0.1272, 0.1, 0.0999, 0.0999, 0.1, 0.141, 0.1, 0.1, 0.1103, 0.1195, 0.1001, 0.1004, 0.1001, 0.1337, 0.1002, 0.1, 0.1024, 0.104, 0.1, 0.1005, 0.1395, 0.1, 0.1049, 0.1, 0.1138, 0.1, 0.1157, 0.1019, 0.1092, 0.1684, 0.1149, 0.1, 0.1309, 0.1006, 0.1, 0.1079, 0.1, 0.1006, 0.1243, 0.1001, 0.1, 0.1473, 0.1037, 0.1018, 0.1422, 0.1066, 0.1663, 0.1157, 0.1038, 0.1, 0.1473, 0.1, 0.1285, 0.1631, 0.1555, 0.1478, 0.1, 0.1339, 0.1455, 0.1374, 0.1019, 0.1245, 0.1602, 0.1291, 0.1349, 0.1, 0.1369, 0.1921, 0.1445, 0.1134, 0.1475, 0.1, 0.1527, 0.1541, 0.116, 0.101, 0.1851, 0.1001, 0.1052, 0.1017, 0.1436, 0.1528, 0.126, 0.1641, 0.1, 0.1369, 0.1129, 0.115, 0.1744, 0.172, 0.1563, 0.1334, 0.2029, 0.1073, 0.1509, 0.1739, 0.1999], label='1 class per device')
plt.plot(np.arange(1,101), [0.102, 0.1355, 0.1518, 0.1665, 0.1412, 0.1715, 0.2014, 0.1873, 0.2396, 0.2222, 0.2047, 0.2105, 0.1823, 0.2342, 0.1561, 0.2587, 0.2316, 0.2665, 0.2529, 0.2538, 0.2126, 0.3206, 0.2783, 0.2129, 0.1925, 0.2906, 0.2199, 0.2736, 0.253, 0.266, 0.1444, 0.1925, 0.3066, 0.2376, 0.2672, 0.2007, 0.3147, 0.2697, 0.3014, 0.2371, 0.3136, 0.323, 0.2302, 0.3282, 0.2528, 0.2937, 0.2826, 0.3197, 0.3508, 0.275, 0.3603, 0.2983, 0.3243, 0.2795, 0.3295, 0.3474, 0.3474, 0.3334, 0.3544, 0.2041, 0.2807, 0.2689, 0.2866, 0.2839, 0.3279, 0.3803, 0.2847, 0.3403, 0.3141, 0.3428, 0.3827, 0.3543, 0.3866, 0.4074, 0.3476, 0.3137, 0.3655, 0.3595, 0.3301, 0.3609, 0.3419, 0.37, 0.3855, 0.3716, 0.3599, 0.3471, 0.403, 0.2917, 0.2839, 0.2238, 0.3518, 0.3342, 0.3399, 0.3795, 0.3146, 0.3204, 0.2578, 0.3758, 0.3838, 0.395], label='2 classes per device')
plt.plot(np.arange(1,101), [0.1162, 0.1003, 0.1504, 0.1588, 0.1576, 0.2193, 0.2154, 0.1874, 0.2433, 0.1715, 0.1596, 0.2055, 0.1982, 0.2952, 0.2564, 0.3525, 0.3303, 0.3118, 0.2115, 0.2876, 0.3496, 0.2449, 0.353, 0.3577, 0.3356, 0.2671, 0.3467, 0.3112, 0.3795, 0.3412, 0.3122, 0.334, 0.3741, 0.2543, 0.2829, 0.3933, 0.3223, 0.426, 0.3948, 0.3714, 0.3925, 0.349, 0.4124, 0.3942, 0.3266, 0.4378, 0.3752, 0.4223, 0.4362, 0.4275, 0.3513, 0.4463, 0.4148, 0.4533, 0.4188, 0.3553, 0.4694, 0.4495, 0.4163, 0.4294, 0.4522, 0.4209, 0.4172, 0.388, 0.4316, 0.4611, 0.4679, 0.447, 0.4197, 0.372, 0.4397, 0.4548, 0.448, 0.4215, 0.4093, 0.465, 0.4818, 0.3678, 0.4603, 0.4337, 0.4472, 0.456, 0.4141, 0.4664, 0.47, 0.4022, 0.4176, 0.4258, 0.4866, 0.4673, 0.3319, 0.4483, 0.3999, 0.3801, 0.4429, 0.4614, 0.4074, 0.4686, 0.4596, 0.4858], label='3 classes per device')
plt.plot(np.arange(1,101), [0.1189, 0.2072, 0.2317, 0.2427, 0.2495, 0.2957, 0.2297, 0.2593, 0.2883, 0.3038, 0.2954, 0.3468, 0.3625, 0.332, 0.2791, 0.3744, 0.285, 0.353, 0.3414, 0.3167, 0.3709, 0.3725, 0.3355, 0.3935, 0.347, 0.4107, 0.3534, 0.4108, 0.3469, 0.36, 0.346, 0.3614, 0.4265, 0.3767, 0.433, 0.4093, 0.351, 0.379, 0.4456, 0.3463, 0.3972, 0.4465, 0.4542, 0.4596, 0.3464, 0.461, 0.3601, 0.4248, 0.444, 0.4519, 0.3699, 0.411, 0.389, 0.3332, 0.4692, 0.446, 0.4007, 0.3425, 0.3841, 0.4657, 0.4727, 0.4762, 0.4742, 0.4757, 0.3879, 0.3292, 0.4101, 0.3604, 0.4157, 0.4738, 0.4858, 0.4814, 0.4517, 0.4606, 0.4863, 0.4736, 0.3602, 0.3712, 0.4212, 0.4097, 0.4858, 0.4758, 0.3655, 0.4255, 0.4279, 0.3796, 0.4813, 0.3758, 0.4012, 0.4846, 0.4953, 0.4962, 0.4633, 0.4848, 0.4868, 0.4024, 0.4142, 0.4231, 0.4816, 0.3866], label='5 classes per device')
plt.plot(np.arange(1,101), [0.1271, 0.1387, 0.1646, 0.2249, 0.2602, 0.2737, 0.2908, 0.3097, 0.3265, 0.3422, 0.3554, 0.3691, 0.3797, 0.3891, 0.3996, 0.4035, 0.4163, 0.4184, 0.4256, 0.4279, 0.4392, 0.4472, 0.446, 0.454, 0.4569, 0.4643, 0.468, 0.467, 0.4706, 0.4785, 0.4772, 0.4824, 0.4858, 0.4842, 0.4863, 0.4899, 0.4877, 0.4937, 0.4975, 0.4926, 0.4946, 0.4966, 0.5016, 0.4985, 0.5006, 0.5021, 0.5046, 0.5039, 0.5026, 0.5104, 0.5087, 0.5142, 0.5082, 0.5088, 0.5112, 0.5112, 0.511, 0.5103, 0.5109, 0.513, 0.5087, 0.5067, 0.509, 0.5106, 0.5119, 0.5156, 0.5105, 0.5144, 0.5072, 0.5085, 0.5099, 0.5098, 0.5109, 0.5096, 0.5131, 0.5107, 0.5133, 0.5114, 0.5099, 0.5169, 0.5137, 0.5138, 0.5082, 0.5115, 0.5101, 0.5128, 0.512, 0.5112, 0.5136, 0.5142, 0.5177, 0.518, 0.5149, 0.5144, 0.5169, 0.5182, 0.5147, 0.5186, 0.5147, 0.5165], label='10 classes per device')

plt.xlabel('rounds')
plt.ylabel('accuracy')

plt.title("Accuracy on CIFAR-10 dataset (non-IID setting)")

plt.legend(loc=4)

plt.savefig('graphs/niid_cifar.png')





fig = plt.figure() 

x = np.linspace(1, 10, 100)

plt.plot(np.arange(1,51), [0.9466327782433188, 0.9728521498811364, 0.9828962693019092, 0.9805974735387137, 0.9856882917078137, 0.9873538143179752, 0.9882458672760226, 0.9891379319187514, 0.9844558853484221, 0.9899938590053768, 0.9916373995947826, 0.9913157767677102, 0.9906366901455025, 0.9918162517407515, 0.9909597635992735, 0.9920544092658412, 0.9900847560482271, 0.9933578383947742, 0.9921149324736346, 0.9915921526424587, 0.993063430044051, 0.9932160565977016, 0.9937130730361907, 0.9934051826465524, 0.9929935425084103, 0.9941127282416277, 0.9932342939824153, 0.9930767745609558, 0.9928095683872211, 0.9937217926645368, 0.9933968700626794, 0.994387654039604, 0.9934102129063571, 0.9941969593175747, 0.9939273050301635, 0.9866470461230902, 0.9941671296615233, 0.9937799993308912, 0.9940028944047968, 0.9937249366494376, 0.9936802078934142, 0.9944577348294985, 0.9940623246459541, 0.9941627220307717, 0.9940032974605385, 0.9943752790351285, 0.9939967625760586, 0.9942145051070586, 0.9941068065544452, 0.9946635294498416], label='Traditional ML')
plt.plot(np.arange(1,51), [0.521648393077663, 0.5674082546203134, 0.730041068474994, 0.8953733565830883, 0.9231608972931701, 0.9386449096535022, 0.9460551052897689, 0.9526479326489934, 0.9582645950176001, 0.9609648807162323, 0.9614506793936657, 0.9660062884977367, 0.9692612537586125, 0.969984906926023, 0.9712169797481991, 0.9725857250815698, 0.9743968997717862, 0.9759077672220666, 0.9772976966643322, 0.9772164301509955, 0.9787849388272626, 0.9793316111751464, 0.9785422241743476, 0.9796664250930125, 0.9809554496798439, 0.9807245389899512, 0.9807729712724559, 0.9818137059145109, 0.9822596192246762, 0.9821650399744513, 0.9822710166632669, 0.9825019013055597, 0.9834614752291172, 0.9834579829274508, 0.9836977375133159, 0.9841362547269521, 0.9841101834240664, 0.9840594846270168, 0.9842879902187317, 0.9852445485953734, 0.9847416753395404, 0.9851675147026784, 0.9849859960792264, 0.986026931351601, 0.9863925146773772, 0.9860704353407787, 0.9863413945094932, 0.9861575847682882, 0.9865852307923813, 0.9863484935557969], label='IID')

plt.plot(np.arange(1,51), [0.5, 0.6532112632407834, 0.8491892683195104, 0.9099560001131349, 0.9284410784613218, 0.9372047547891407, 0.9457493490782685, 0.9500310394360936, 0.9501109918177008, 0.9546174973548085, 0.96174001197262, 0.9625432930235769, 0.9645444874989483, 0.9680219978577165, 0.9716604016748326, 0.972172953572179, 0.9732213746354486, 0.975151721751374, 0.9772693274647963, 0.9770619659037392, 0.9753118727030538, 0.9789989570946419, 0.9788395749846265, 0.9791118839735466, 0.9797586382646941, 0.9799741617654604, 0.980910528985499, 0.9807879852295297, 0.981949076665671, 0.9820535145373265, 0.9817207735199993, 0.982961678313383, 0.9821713631563455, 0.982994977788272, 0.9828527926641261, 0.9829931134515999, 0.9832376892772461, 0.9840516219864229, 0.9833838442225205, 0.9843115631670012, 0.9842964212298732, 0.9848923655405804, 0.9840054518725179, 0.9846396136958436, 0.9845177355777318, 0.9854599813145528, 0.9851494065113752, 0.9851056087781765, 0.9852849591968006, 0.9860513834062216], label='20% IID')
plt.plot(np.arange(1,51), [0.5139805091725854, 0.6613708989248341, 0.7631455377967983, 0.8092160308864699, 0.838648330840304, 0.8571582358785177, 0.877094479514606, 0.8945253916015556, 0.8993971442804265, 0.9050006578963634, 0.9184791117796129, 0.9356525876614915, 0.9244142036973745, 0.9439973742754786, 0.9444942141701335, 0.9452233749020336, 0.9467723987170432, 0.9531948246314974, 0.9600051708905069, 0.9423826166029325, 0.9660544691528605, 0.9584332532932462, 0.9627264361835209, 0.947591538261489, 0.962935783996509, 0.9692779540862325, 0.966057305731366, 0.9581098615159928, 0.967387028764626, 0.9698154026936645, 0.9579468934959028, 0.9642672478998697, 0.9714690147397402, 0.9745541482337934, 0.9763153438422792, 0.9675579335120691, 0.97055743928794, 0.9742678827955367, 0.9768829366149527, 0.9746779975286775, 0.9729783843497994, 0.9732159529304683, 0.9782557272758462, 0.9713196587980152, 0.9781280946671955, 0.9781284439988461, 0.9786486431653442, 0.9778751573166815, 0.9803547742792251, 0.9781451667353567], label='40% IID')
plt.plot(np.arange(1,51), [0.5001139798375634, 0.6312135429320394, 0.6447958908585532, 0.6601134238290269, 0.7040674361720696, 0.6941609614411985, 0.7330032989641141, 0.7441766978524949, 0.7617777308266683, 0.7874628499742539, 0.8010939333283813, 0.8207768219109755, 0.8315581933101056, 0.846959253470694, 0.8395415509111178, 0.8442884589898046, 0.8593299793256186, 0.8458697091092333, 0.8610168277459579, 0.8619238996546853, 0.8693158896831573, 0.868663100656212, 0.8802939216823689, 0.8902992130520395, 0.8882105369759383, 0.8874327126432691, 0.9036550339315091, 0.8969338398433724, 0.9060302385361872, 0.9144814920573825, 0.9001837652602027, 0.9036819328413029, 0.9199240110871768, 0.9121139181957576, 0.9223582743288132, 0.9265246496971606, 0.9175920712563908, 0.9240313490745352, 0.9259029227660382, 0.9291943775562365, 0.9318941387831605, 0.9350677508780747, 0.9352024572970293, 0.9398586828384963, 0.9304593139783218, 0.9322643222652383, 0.9390308719907056, 0.9418331537103206, 0.9487596663445983, 0.9385452611397692], label='60% IID')
plt.plot(np.arange(1,51), [0.5068282961496328, 0.5390398008722632, 0.542293158572532, 0.5514015414826573, 0.569641210051708, 0.6054769820195501, 0.6500526478281425, 0.6439009402214821, 0.6926669794690674, 0.7094319908789773, 0.6845230503603247, 0.7035867979591421, 0.6530862013743847, 0.6902847291052099, 0.7547448878959682, 0.7293287771070468, 0.7451167829668155, 0.7735440982696249, 0.7603297896109246, 0.7721856950329828, 0.7830217678427236, 0.7878910481335827, 0.8024625411917897, 0.8183759258635558, 0.8144085822597085, 0.8298702955162236, 0.833312948947168, 0.8379832706365201, 0.8254105943630827, 0.8260052597722133, 0.817298671222515, 0.8506738726852534, 0.8541516430449299, 0.8496196250208848, 0.8518885835965705, 0.864524008063227, 0.8596370451053257, 0.8778297601623212, 0.8584433115501577, 0.8730857191410852, 0.8820791519537895, 0.8778349841858317, 0.8699341061200847, 0.8913929623901591, 0.8835571867059633, 0.8712363886654844, 0.881453123022965, 0.8961820280824782, 0.888009184060836, 0.8846773847717309], label='80% IID')
plt.plot(np.arange(1,51), [0.5, 0.5, 0.5, 0.48731769197137503, 0.5, 0.5, 0.519132481026979, 0.5070112571542603, 0.5, 0.5000541545491262, 0.5400276555856542, 0.5491626092934233, 0.5539364116582882, 0.515741197842528, 0.5, 0.6020266265231803, 0.5008516075322006, 0.5131997935659525, 0.5670773439336843, 0.5158660770680008, 0.5651648063838548, 0.5967511884798639, 0.5133096987185991, 0.5099993179237552, 0.5356985829811955, 0.559115417803652, 0.5956863301314398, 0.5, 0.6758039036336302, 0.5382722743815085, 0.6055242077841336, 0.6714500527853824, 0.5849828276193303, 0.6434118200318715, 0.5208757173767469, 0.5302297646757569, 0.6394811153429579, 0.6070525945418168, 0.6557908236911929, 0.6292824917981873, 0.6136081890545011, 0.5516235561175081, 0.6116404538042911, 0.7295334515876538, 0.6694833918498058, 0.6508698306184686, 0.65832341152524, 0.6708078765479548, 0.6995961391126453, 0.637597596555327], label='100% IID')

plt.plot(np.arange(1,51), [0.5, 0.5, 0.5, 0.5195922547512539, 0.5, 0.5, 0.5002258389367823, 0.5, 0.528396780223609, 0.5, 0.5, 0.5, 0.5, 0.503869206547068, 0.5, 0.5, 0.5216684443733018, 0.5477123744284069, 0.5, 0.5000650021290974, 0.5319350535434082, 0.5561511356549751, 0.5, 0.5500156250174498, 0.5, 0.49999928562730495, 0.5, 0.5315146737044024, 0.5, 0.5462664575398458, 0.4999998895921308, 0.5, 0.5471288172493892, 0.537328315338684, 0.5014114921255174, 0.5033867323567185, 0.5381059012173549, 0.5, 0.5111178995954447, 0.5, 0.5198445050664546, 0.5840361562595773, 0.5094312897615368, 0.5037283290623609, 0.5509656615293078, 0.5088969613103074, 0.5009805496148931, 0.5457714261765337, 0.5726271831206035, 0.5560800425094268], label='1 class per device')
plt.plot(np.arange(1,51), [0.5668282534476823, 0.5475341594900589, 0.5747634183619987, 0.6460504746708488, 0.6316502987167112, 0.6596793788682976, 0.6526761414270034, 0.7378853608844305, 0.775870290919687, 0.7620634023895221, 0.7671869169672422, 0.8002670625468852, 0.7757696217632066, 0.8227853147878628, 0.7280071405914937, 0.8213443345932616, 0.7462947167161916, 0.7835495479993534, 0.8385680187503249, 0.816544712201614, 0.7597607158277404, 0.8733620052668201, 0.8602483287533979, 0.8352356545807342, 0.8283596517947762, 0.8130705291884285, 0.8118259384729256, 0.8345687039866417, 0.8383430503000294, 0.8076095529485962, 0.7728758831909666, 0.8083154927453255, 0.8388601666169342, 0.8101476792496582, 0.888500422103041, 0.8585350562203711, 0.8790502565950981, 0.8534792197194202, 0.9162761788443419, 0.8687982072898588, 0.8891117117149905, 0.9084580734724108, 0.8758124232829723, 0.9031616900584034, 0.8344317468550138, 0.8904691848948858, 0.9084808114054651, 0.9195354849659051, 0.9200389884736465, 0.8174387061868634], label='2 classes per device')
plt.plot(np.arange(1,51), [0.5525560006614898, 0.5848461248005209, 0.6896755170485568, 0.7637682150137804, 0.7737781460345924, 0.8111666908568946, 0.8657753681451787, 0.8327373580557866, 0.8709240413535694, 0.8279281593033904, 0.8083747854655442, 0.8618698222273841, 0.844632165964421, 0.9102664918565951, 0.8995341307733895, 0.933712704965828, 0.9113044373993038, 0.9297605455304849, 0.8918312287683857, 0.8795400504612936, 0.935764525237766, 0.885128359343784, 0.930471541534664, 0.9409118576123202, 0.937999585563478, 0.9153388549201017, 0.9389631294880327, 0.9330330646106555, 0.947039694652944, 0.9389030794511882, 0.9150019064390648, 0.9108366587067047, 0.9530673165927082, 0.9155883612878976, 0.9270758320363216, 0.9483604574490606, 0.9244785494289731, 0.9512426767821198, 0.9559450230206263, 0.9518212685254536, 0.9353445821374624, 0.9421616666373642, 0.9600294687992943, 0.9431389374791882, 0.9322822756009032, 0.9628805172627658, 0.9493630557072011, 0.9626179373428781, 0.9538956017868623, 0.9631431792572182], label='3 classes per device')
plt.plot(np.arange(1,51), [0.5430539579621706, 0.6564625271967552, 0.6861561212258948, 0.7104155244900004, 0.7368728257651176, 0.9042377991468322, 0.8854042487454633, 0.9093457580090181, 0.893402039635306, 0.908949109068111, 0.8674887145694147, 0.9144577249515298, 0.9385795890192192, 0.9199846598067568, 0.8699480438651411, 0.9359899329053316, 0.880974663686932, 0.9461079653118422, 0.9307878949859469, 0.9244095829225338, 0.9469629567071196, 0.9427341190357161, 0.8592403587742723, 0.9514970589189427, 0.9412118818549956, 0.9568490495265133, 0.939163961065006, 0.9545729110196405, 0.9249519915308422, 0.9357359843158886, 0.9361742430743846, 0.9452801557704487, 0.9627280961547191, 0.95386429814978, 0.961603310784823, 0.9541735624943662, 0.9218265246840455, 0.9486500998494618, 0.9601891557772433, 0.93189281598497, 0.9616470171989334, 0.9586145402572688, 0.9652636104368767, 0.9666712015835582, 0.9237719728558508, 0.9651286671307936, 0.9062225492096398, 0.936657709403298, 0.9607989521961946, 0.9616384620747713], label='5 classes per device')
plt.plot(np.arange(1,51), [0.5175814964280963, 0.5649625548446451, 0.7339741080399095, 0.8930544188389625, 0.9246819864041438, 0.9377996126925294, 0.9446598095534382, 0.9524436398411538, 0.9568500399580284, 0.9591749361916684, 0.9629631015257056, 0.966456394769277, 0.9684319301103608, 0.9700721960636631, 0.971265009178838, 0.971933960020082, 0.9734443650057194, 0.9760118418318955, 0.9758901120877473, 0.9777846802954263, 0.9793344370886141, 0.9785672069046871, 0.979308652312689, 0.9812054082259103, 0.9814510617024682, 0.981710486432576, 0.9817728481630456, 0.9815747735977005, 0.9821809963345203, 0.9825123431935314, 0.9828503639359354, 0.9830892345837816, 0.9838635989212772, 0.9838651444974176, 0.9844550383521329, 0.984751607007327, 0.9851460231715459, 0.9848372380131203, 0.9845234799194756, 0.9849121439226642, 0.9858147189110482, 0.9852010959142211, 0.9862526038547511, 0.986237346803752, 0.985651739525242, 0.9859070185663317, 0.9862634210275694, 0.9864848637354287, 0.986605615184582, 0.9859522023274219], label='10 classes per device')

plt.xlabel('rounds')
plt.ylabel('average AUC value')

plt.title("AUC (Area under the ROC curve)")

plt.legend(loc=4)

ax = plt.subplot(111)
box = ax.get_position()
ax.set_position([box.x0, box.y0 + box.height * 0.1,
                 box.width, box.height * 0.9])

# Put a legend below current axis
ax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.05),
          fancybox=True, shadow=True, ncol=5)

fig.set_size_inches(10, 6)

plt.savefig('graphs/auc.png')





fig = plt.figure() 

x = np.linspace(1, 10, 100)

plt.plot(np.arange(1,51), [0.8936278632931086, 0.9467486125845723, 0.966207240014345, 0.9616492818600147, 0.9714337673388835, 0.9745469809990768, 0.9768787319727475, 0.9785464635468067, 0.9679927517808227, 0.9801034232949454, 0.983437700644198, 0.982660161337195, 0.9814371822576367, 0.9837713869499587, 0.982104421743959, 0.9842161994746929, 0.9806580079015373, 0.9867727071685558, 0.9844382479276775, 0.9834371124221778, 0.9863277258779735, 0.9864395200314799, 0.9875506582611675, 0.9868837836202666, 0.9861056731803568, 0.9883287854500638, 0.9865501872869747, 0.9862169808463275, 0.985772228472623, 0.9875506495431928, 0.9868839027316451, 0.9888844324108298, 0.9869949239743263, 0.988550939167016, 0.9879953117690896, 0.9731061228945498, 0.9884399382039112, 0.9877728476540947, 0.988106467082958, 0.9875507562337588, 0.9874396181875129, 0.988995678480669, 0.9882175157743563, 0.9884398727994742, 0.9881063802256188, 0.9888844629290392, 0.9881064641745136, 0.9885510309229764, 0.9883287266817546, 0.9894402379045484], label='Traditional ML')
plt.plot(np.arange(1,51), [0.046570203150430485, 0.14002327844013654, 0.4689240547660704, 0.7927033951493662, 0.8483733568199002, 0.8792618201093841, 0.8932844564286494, 0.9064006295391387, 0.9174069325085913, 0.9223074168140846, 0.923415449533638, 0.9326381516477942, 0.938976591420469, 0.9405311475562176, 0.9428668532690074, 0.9457536562369179, 0.9489821136959271, 0.9520926561376477, 0.9548712846784722, 0.9548700175359994, 0.9579826258157749, 0.9589830796088514, 0.957316430165417, 0.9595402347911298, 0.9622069521512002, 0.9616516345334968, 0.9618737180176627, 0.963874704090754, 0.9647638332605472, 0.9646519607040516, 0.9647637854769907, 0.9650982785237181, 0.9672087034637036, 0.9672084410230362, 0.9677637331526739, 0.968542581117901, 0.9683215285269304, 0.9684314371442625, 0.9687655394220241, 0.9707656075001801, 0.9696545294899783, 0.9705436188480334, 0.9702100066699573, 0.9722114384077536, 0.9729890999013258, 0.9723223942209426, 0.9728780217149007, 0.9725445739952742, 0.9733228056231924, 0.9728780934660248], label='IID')

plt.plot(np.arange(1,51), [0.0, 0.3054034852252542, 0.7049682457756635, 0.8223565504132211, 0.8583866158322786, 0.8746483820439942, 0.892513204563856, 0.9010693007991689, 0.9009720587162116, 0.9098623764092034, 0.9240822750285761, 0.9257498737553337, 0.9295295966079593, 0.9365310149198687, 0.9435354661017783, 0.9443160323245765, 0.9467580492687229, 0.9504269115446821, 0.9548709736683025, 0.9545361101447101, 0.9511997925624348, 0.9580962017396901, 0.9582041929042348, 0.9585389278228982, 0.9597620818600874, 0.9599855917007805, 0.9619854353531316, 0.9618733802508622, 0.9640970163975929, 0.9643193469137752, 0.9637627924845633, 0.9659876841404272, 0.9645412589851643, 0.9662087319971184, 0.9659863454073285, 0.9660986663081944, 0.9666535459485459, 0.9683205517319388, 0.96687628494727, 0.9687656762125504, 0.9687655682384021, 0.9699880282244587, 0.9682097703424902, 0.9695431308449887, 0.9690997631708035, 0.9710997684124404, 0.9705437468709679, 0.9704323608073651, 0.9706555053250921, 0.9722115041993921], label='20% non-IID')
plt.plot(np.arange(1,51), [0.028921605738754907, 0.3190289827514008, 0.5249350873964226, 0.6183160793338904, 0.67625975146845, 0.7130245951460629, 0.7529332020100199, 0.785946670611406, 0.7962511160247965, 0.808772360307876, 0.8370530138966676, 0.8693546851326265, 0.8447175044303551, 0.885898766252357, 0.8861365924765658, 0.8883430524503011, 0.8919043958038418, 0.9063221731815649, 0.9185571608844065, 0.8830959200753921, 0.9311021582193374, 0.9163182985209676, 0.9246563244914753, 0.8927784651869509, 0.9245528671227208, 0.9376564056037356, 0.9303307540230268, 0.9136718252547087, 0.9329985185227985, 0.9389881806547746, 0.914649517858127, 0.9269934951204153, 0.942098326421585, 0.9483228675656347, 0.9522102838201235, 0.9334405174349731, 0.9403243057269164, 0.9477687789187323, 0.952990635212208, 0.9484367878803692, 0.9444404583559955, 0.944886059094212, 0.9560998790212691, 0.9419824838672404, 0.9557662366974461, 0.955765591198153, 0.9566561384426944, 0.954769161303006, 0.9602128890501513, 0.9557677449193865], label='40% non-IID')
plt.plot(np.arange(1,51), [0.000226625678887159, 0.2601434023221308, 0.2872071565467009, 0.31783798505634536, 0.4159837748865776, 0.3906904224717014, 0.46916965201384353, 0.49239713021694875, 0.5251940162761937, 0.5797629718673595, 0.6073145091787039, 0.6482040388111, 0.6668755484062674, 0.6993676269187828, 0.6821725917067094, 0.6881137172041105, 0.7210666522347368, 0.6997058719113415, 0.7244119311765026, 0.7267224633679463, 0.743085980717797, 0.7426065739704176, 0.7634730891340438, 0.7817558733422656, 0.7770610555455879, 0.7777098212002278, 0.8098280761336791, 0.7961678760483739, 0.8148049893759092, 0.8297467708813502, 0.8033613515062127, 0.8109034977516859, 0.8412856943527471, 0.8278997822187366, 0.8485694751907213, 0.8538597631396827, 0.8390060912067628, 0.8499450031763864, 0.8551322851255456, 0.8598422786600033, 0.8647532199680079, 0.8715106385301048, 0.8721723808131944, 0.8805202970952283, 0.8613032607981246, 0.8645303913231349, 0.8806082403192041, 0.8849586055498012, 0.8996159615734792, 0.8778536293032144], label='60% non-IID')
plt.plot(np.arange(1,51), [0.013406977295737508, 0.07731872530510307, 0.08376580361018038, 0.10201504228575761, 0.14117931935799816, 0.21164253239747072, 0.3021916059236658, 0.28633598353600326, 0.3881272763251102, 0.425457872721309, 0.3748071757336922, 0.4087286666625938, 0.3023857896705002, 0.38151838735724486, 0.5171786942330692, 0.46709489422206124, 0.49935675737407575, 0.5553336845878387, 0.5291232175354114, 0.5533415986078758, 0.5739083583846568, 0.5815285106292926, 0.6108182218399054, 0.6422860685886117, 0.6343313431288742, 0.6664342269171234, 0.6752525048013417, 0.6820087016651003, 0.6560799463173477, 0.6583463914202318, 0.6419110668118774, 0.7069106607989352, 0.7143442687069284, 0.7042571537859686, 0.7091719884153508, 0.7351581080522454, 0.7235210605692095, 0.7598511771061325, 0.7221575671231573, 0.7509804034917884, 0.7694263548944853, 0.7561259115585673, 0.7389465439949446, 0.7879410539736611, 0.7706524699322664, 0.7483313915296732, 0.7695916897860796, 0.795466053773286, 0.7815193621655133, 0.7759144486515688], label='80% non-IID')
plt.plot(np.arange(1,51), [0.0, 0.0, 0.0, -0.025068598678388166, 0.0, 0.0, 0.03787143065342737, 0.013947888402656974, 0.0, 0.00011512663602834836, 0.08136668072782728, 0.09746159546351428, 0.11392589634280142, 0.030978492417211095, 0.0, 0.20227348053842045, 0.001673764670549182, 0.02495125470072, 0.13963910163447335, 0.03207418537427588, 0.12975114651978678, 0.20107344581822417, 0.026435458025805735, 0.019152313917644468, 0.07261916571972737, 0.11687064500082721, 0.1982763850397678, 0.0, 0.3579989398860138, 0.07847059304208721, 0.21742535561776025, 0.3345411683434654, 0.1690480607699372, 0.2889628733466509, 0.041436233278496826, 0.0599712078026445, 0.2861843553586242, 0.21354849174825027, 0.32320541934378794, 0.2608144317873525, 0.22447615775842364, 0.10775052110262316, 0.2193094352316593, 0.4659891424324537, 0.34503410208102736, 0.3089926825185652, 0.3127074133017611, 0.3560067040483383, 0.40716412000710817, 0.2727576575793335], label='100% non-IID')

plt.plot(np.arange(1,51), [0.0, 0.0, 0.0, 0.03967433339396527, 0.0, 0.0, 0.00044337032757164554, 0.0, 0.05742614054652076, 0.0, 0.0, 0.0, 0.0, 0.007827420954471368, 0.0, 0.0, 0.04242668093120716, 0.09486051257838572, 0.0, 0.00019572364248738545, 0.0616376551769065, 0.11211158523475259, 0.0, 0.09852061928192693, 0.0, -1.2846014820352187e-05, 0.0, 0.06131731409408238, 0.0, 0.09224973397518568, -1.957535351510434e-06, 0.0, 0.09336133053068503, 0.07433151355729033, 0.002771043726100594, 0.007175403878216143, 0.07536985593936289, 0.0, 0.022345607283087064, 0.0, 0.03886116426519713, 0.168704802703715, 0.01878853083089453, 0.007175980923197212, 0.09994079147283662, 0.017517089741928633, 0.0018534716943826642, 0.090244023527566, 0.14529903137888825, 0.10968035207657774], label='1 class per device')
plt.plot(np.arange(1,51), [0.13415193174687237, 0.09435155199272907, 0.14729270991943733, 0.29801943950621007, 0.255416272839841, 0.3275143462306756, 0.3028218764616349, 0.48130564692261774, 0.5536716602837863, 0.5248621124614916, 0.5300602237097712, 0.5973440337315349, 0.5563982852215678, 0.6534891385586474, 0.45996641111232917, 0.6415384610093418, 0.484630980129333, 0.568687020037167, 0.6765047570569604, 0.638240708404985, 0.5182799678829677, 0.7523119405886768, 0.7288240787215353, 0.6749912818607364, 0.6582816455132108, 0.6274822689005906, 0.6243954875617317, 0.6746313777003733, 0.677165873395424, 0.6143549459089227, 0.5565541711119364, 0.6169478468780467, 0.6807825703680966, 0.6172722492741239, 0.7792431043441888, 0.7254110767034604, 0.7611983706124579, 0.711496378461455, 0.8320312664465913, 0.7425071642515322, 0.7799861603623846, 0.816883063735683, 0.753670301393279, 0.811561064627035, 0.6776797212313437, 0.7849785264814121, 0.822755633191481, 0.83971996476907, 0.8405152502151795, 0.6399058054065869], label='2 classes per device')
plt.plot(np.arange(1,51), [0.10470506472853562, 0.1704323122153742, 0.38305162793787856, 0.5419092932885095, 0.5566711717829051, 0.6245835900834772, 0.7388224987624948, 0.6651854135063318, 0.7497947822143807, 0.6582485937701295, 0.618754530617666, 0.7258276753478715, 0.6905347614821093, 0.823017701820602, 0.8052253835975389, 0.868833415625544, 0.8247941706708222, 0.8621065342008655, 0.7864768920732994, 0.7658073635458144, 0.8741119498853462, 0.7736568645407296, 0.8618573355694145, 0.8825136677619014, 0.8783470802059368, 0.8295607331217294, 0.8811469829800923, 0.8672880461163592, 0.8960381645565749, 0.8792753036545711, 0.8327843252115398, 0.8218653414663047, 0.9071787581600571, 0.834721983802443, 0.8568661348478045, 0.8965437465989868, 0.8527646877232439, 0.9031790422266321, 0.9119779808028866, 0.9046179020391837, 0.8714015439995226, 0.8869014874255973, 0.9209628068532871, 0.8861013816380225, 0.8658212792132337, 0.9263032585119847, 0.8989679773391286, 0.9261877338509322, 0.9078653136700946, 0.9267497212932493], label='3 classes per device')
plt.plot(np.arange(1,51), [0.08321922221589707, 0.3079070291399193, 0.36308022245478117, 0.4125560157532489, 0.4669232173491247, 0.8103545419614755, 0.7753214205042918, 0.8220723161716225, 0.787549854809993, 0.8179196402385375, 0.733564600888657, 0.8302538921548619, 0.8782814731263167, 0.8401005310962519, 0.7453779252338819, 0.873062561772237, 0.7667720222431647, 0.8940429029958663, 0.8613280622588998, 0.8512381637750631, 0.8962607492849246, 0.8880302278800574, 0.7153606481055981, 0.9034176900714574, 0.885140877715608, 0.9144127609995358, 0.8806943247835826, 0.9111649038440692, 0.849026061456769, 0.8708926301335623, 0.8745905431263443, 0.8908666790454822, 0.9261922587395285, 0.9078702827806647, 0.923749944813189, 0.9101691950980887, 0.8468832144250467, 0.8995988613154401, 0.9217361675068355, 0.8661308758816628, 0.9239702039229174, 0.9170977537169628, 0.9310860907677991, 0.9339742206012437, 0.8512116277512422, 0.9311907787017295, 0.8096572112942437, 0.8755864365066887, 0.9232870293842698, 0.924515925577772], label='5 classes per device')
plt.plot(np.arange(1,51), [0.03747116212053748, 0.13259068502286708, 0.47693458597780497, 0.7889909344146248, 0.8515795009566952, 0.8766211014685624, 0.8900730507370447, 0.9059553800075745, 0.9141902428326094, 0.918967732050544, 0.9268545845017471, 0.9336369168338509, 0.9374174560700554, 0.9406427133634071, 0.9430869502567606, 0.944751320412872, 0.9474219737644319, 0.9524251851021558, 0.9523121037416501, 0.9559814867915337, 0.9588731395861759, 0.9575377770946275, 0.9592031288332177, 0.9626519951254184, 0.9632070946147682, 0.9636525909305745, 0.9638741575731438, 0.9636504119386543, 0.9646520298577411, 0.9652081605204326, 0.9659857329046351, 0.9665411961522375, 0.9679867091487482, 0.9679870479152859, 0.9690989123917596, 0.9697652495049977, 0.9705434295947006, 0.9699871504987001, 0.9693207678015856, 0.9699885079327653, 0.9718772088687812, 0.970544269101333, 0.9726557778935992, 0.9726556043394889, 0.9715438078909132, 0.9719889885601696, 0.9726558873136223, 0.9731006080941004, 0.9733230689394923, 0.9720998378956119], label='10 classes per device')

plt.xlabel('rounds')
plt.ylabel('Kappa value')

plt.title("Kappa")

plt.legend(loc=4)

ax = plt.subplot(111)
box = ax.get_position()
ax.set_position([box.x0, box.y0 + box.height * 0.1,
                 box.width, box.height * 0.9])

# Put a legend below current axis
ax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.05),
          fancybox=True, shadow=True, ncol=5)

fig.set_size_inches(10, 6)

plt.savefig('graphs/kappa.png')





fig = plt.figure()

x = np.linspace(1, 10, 100)

plt.plot(np.arange(1,101), [0.1137, 0.0982, 0.1007, 0.1011, 0.1028, 0.0974, 0.1065, 0.0974, 0.1085, 0.1135, 0.0974, 0.1135, 0.0974, 0.1039, 0.0963, 0.1028, 0.1782, 0.1151, 0.1029, 0.1043, 0.1798, 0.2167, 0.1135, 0.1903, 0.098, 0.0892, 0.1032, 0.1637, 0.101, 0.163, 0.1065, 0.1135, 0.2362, 0.1178, 0.2095, 0.1292, 0.2546, 0.098, 0.1257, 0.0958, 0.1942, 0.2488, 0.1623, 0.1703, 0.1923, 0.1854, 0.1116, 0.1781, 0.2433, 0.1132, 0.1014, 0.1735, 0.1865, 0.2404, 0.1392, 0.1873, 0.1437, 0.2492, 0.2507, 0.1203, 0.1512, 0.1352, 0.301, 0.1012, 0.1564, 0.2823, 0.1546, 0.2384, 0.1748, 0.3175, 0.259, 0.2031, 0.1833, 0.2521, 0.1791, 0.3304, 0.2473, 0.1416, 0.2201, 0.343, 0.2174, 0.1869, 0.1486, 0.2537, 0.378, 0.188, 0.2145, 0.101, 0.3216, 0.2038, 0.2561, 0.3102, 0.4009, 0.3393, 0.2511, 0.2884, 0.2094, 0.4046, 0.402, 0.4785], label='1 class per device, 5-layer CNN')
plt.plot(np.arange(1,101), [0.0556, 0.0902, 0.1096, 0.1009, 0.1035, 0.105, 0.1009, 0.1031, 0.1759, 0.1274, 0.1199, 0.2233, 0.1955, 0.2175, 0.1602, 0.3713, 0.2626, 0.3807, 0.3871, 0.3002, 0.3228, 0.5403, 0.4111, 0.3419, 0.2841, 0.4869, 0.31, 0.4797, 0.3882, 0.408, 0.319, 0.3981, 0.5417, 0.4288, 0.6064, 0.4628, 0.5742, 0.501, 0.6122, 0.5223, 0.5802, 0.6518, 0.5032, 0.6731, 0.52, 0.6683, 0.6748, 0.6802, 0.7358, 0.4403, 0.6534, 0.6062, 0.638, 0.5727, 0.6737, 0.7666, 0.7465, 0.743, 0.7904, 0.5549, 0.6182, 0.5936, 0.6529, 0.5765, 0.7004, 0.7946, 0.7281, 0.7902, 0.6519, 0.6915, 0.7764, 0.7684, 0.785, 0.821, 0.7786, 0.6983, 0.7686, 0.7598, 0.7067, 0.7351, 0.7386, 0.7746, 0.8043, 0.7851, 0.7849, 0.7009, 0.7929, 0.7034, 0.6851, 0.5633, 0.723, 0.7512, 0.6977, 0.7525, 0.8174, 0.7742, 0.7649, 0.8137, 0.8078, 0.8354], label='2 classes per device, 5-layer CNN')
plt.plot(np.arange(1,101), [0.0889, 0.0891, 0.0892, 0.0892, 0.0893, 0.0938, 0.0956, 0.1011, 0.133, 0.1401, 0.1141, 0.218, 0.2385, 0.2144, 0.1138, 0.3195, 0.285, 0.2725, 0.2839, 0.3771, 0.4348, 0.4679, 0.2148, 0.5907, 0.5332, 0.7028, 0.5852, 0.636, 0.534, 0.6361, 0.6228, 0.6467, 0.7491, 0.7221, 0.7758, 0.7713, 0.6868, 0.7227, 0.7804, 0.6989, 0.774, 0.8111, 0.8217, 0.8288, 0.7107, 0.8257, 0.6267, 0.7393, 0.8322, 0.8269, 0.7662, 0.797, 0.7796, 0.7073, 0.8546, 0.817, 0.8006, 0.712, 0.748, 0.8538, 0.862, 0.867, 0.8673, 0.867, 0.7897, 0.6738, 0.7726, 0.758, 0.8287, 0.8799, 0.8813, 0.8818, 0.8622, 0.8809, 0.8851, 0.8614, 0.792, 0.7027, 0.7853, 0.8062, 0.8724, 0.8787, 0.8164, 0.8612, 0.8726, 0.7753, 0.8948, 0.7323, 0.8246, 0.888, 0.8955, 0.9007, 0.8798, 0.9013, 0.8984, 0.8363, 0.8681, 0.8804, 0.8923, 0.7899], label='5 classes per device, 5-layer CNN')

plt.plot(np.arange(1,101), [0.0982, 0.0982, 0.1092, 0.1382, 0.1109, 0.099, 0.1385, 0.0974, 0.1716, 0.117, 0.1117, 0.2388, 0.0989, 0.2381, 0.171, 0.2416, 0.2294, 0.2399, 0.1312, 0.3282, 0.3097, 0.3311, 0.3729, 0.3528, 0.1021, 0.1867, 0.1033, 0.1976, 0.101, 0.2826, 0.2106, 0.4122, 0.4363, 0.2171, 0.4332, 0.5088, 0.4189, 0.3952, 0.4705, 0.3472, 0.3996, 0.467, 0.5305, 0.5411, 0.4332, 0.4445, 0.2545, 0.4476, 0.6141, 0.3927, 0.4077, 0.2026, 0.4216, 0.5471, 0.4176, 0.5116, 0.5524, 0.4562, 0.666, 0.7463, 0.4516, 0.4637, 0.302, 0.4514, 0.5874, 0.6585, 0.8419, 0.6214, 0.2749, 0.438, 0.8627, 0.6329, 0.6403, 0.6434, 0.3796, 0.441, 0.8031, 0.5231, 0.6448, 0.7878, 0.2409, 0.1031, 0.4256, 0.2166, 0.4191, 0.4868, 0.528, 0.1282, 0.7093, 0.5156, 0.5513, 0.7171, 0.6101, 0.5295, 0.5838, 0.6021, 0.6961, 0.713, 0.7365, 0.8069], label='1 class per device, VGG11')
plt.plot(np.arange(1,101), [0.1032, 0.1009, 0.2863, 0.2617, 0.4311, 0.4703, 0.5479, 0.8474, 0.8074, 0.8439, 0.8775, 0.9059, 0.8748, 0.9242, 0.8438, 0.8997, 0.8728, 0.8425, 0.9075, 0.9233, 0.8719, 0.9501, 0.9361, 0.906, 0.9326, 0.911, 0.9393, 0.9522, 0.9366, 0.9287, 0.9035, 0.9253, 0.9188, 0.8781, 0.956, 0.9487, 0.9554, 0.9421, 0.9615, 0.9287, 0.9574, 0.9628, 0.935, 0.9523, 0.9323, 0.9415, 0.9524, 0.9437, 0.9568, 0.8868, 0.9579, 0.9351, 0.9247, 0.9479, 0.9362, 0.9565, 0.9667, 0.9633, 0.9603, 0.9035, 0.9493, 0.9426, 0.9121, 0.9178, 0.9646, 0.9717, 0.955, 0.9614, 0.9598, 0.9548, 0.9602, 0.956, 0.9614, 0.9662, 0.9605, 0.9424, 0.9493, 0.9631, 0.9676, 0.9591, 0.965, 0.9564, 0.9656, 0.9639, 0.9542, 0.9632, 0.9668, 0.9392, 0.9651, 0.9563, 0.9516, 0.9666, 0.8583, 0.9536, 0.958, 0.9649, 0.9228, 0.9222, 0.9674, 0.9455], label='2 classes per device, VGG11')
plt.plot(np.arange(1,101), [0.0892, 0.1142, 0.2689, 0.7149, 0.8827, 0.954, 0.9514, 0.959, 0.9646, 0.9627, 0.9536, 0.9749, 0.9756, 0.963, 0.9589, 0.978, 0.9649, 0.9761, 0.9779, 0.9768, 0.9715, 0.9765, 0.9585, 0.978, 0.9814, 0.9847, 0.979, 0.9796, 0.98, 0.9731, 0.9841, 0.9764, 0.9855, 0.9825, 0.9832, 0.9845, 0.9785, 0.975, 0.9834, 0.977, 0.9836, 0.9828, 0.9869, 0.9872, 0.9801, 0.984, 0.9749, 0.9867, 0.9852, 0.9854, 0.9791, 0.9762, 0.9856, 0.9787, 0.9835, 0.9861, 0.9876, 0.9717, 0.988, 0.9883, 0.9813, 0.9883, 0.9878, 0.9877, 0.9785, 0.9811, 0.9869, 0.982, 0.9875, 0.9888, 0.9885, 0.9887, 0.9874, 0.9883, 0.9887, 0.9881, 0.9862, 0.9843, 0.9882, 0.9756, 0.9824, 0.9854, 0.9859, 0.9883, 0.9871, 0.9771, 0.9836, 0.954, 0.9871, 0.9877, 0.9865, 0.9888, 0.9825, 0.9898, 0.9896, 0.9832, 0.9896, 0.988, 0.9883, 0.982], label='5 classes per device, VGG11')

plt.xlabel('rounds')
plt.ylabel('accuracy')

plt.title("E = 1, performance using different CNNs under non-IID setting")

plt.legend(loc=4)

plt.savefig('graphs/niid_cnn.png')






"""
import pandas as pd

df = pd.read_csv('')

df.values.tolist()

print(np.array(df['test accuracies']).tolist())
"""